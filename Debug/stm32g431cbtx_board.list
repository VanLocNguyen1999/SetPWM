
stm32g431cbtx_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006878  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006a50  08006a50  00016a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ac8  08006ac8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ac8  08006ac8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ac8  08006ac8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac8  08006ac8  00016ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000000c  08006adc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08006adc  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fe5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab4  00000000  00000000  00037021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  0003aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258d8  00000000  00000000  0003d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b0a  00000000  00000000  00062dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4da5  00000000  00000000  000798e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e687  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b48  00000000  00000000  0015e6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006a38 	.word	0x08006a38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006a38 	.word	0x08006a38

08000218 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 8000220:	4b0e      	ldr	r3, [pc, #56]	; (800025c <LL_RCC_SetADCClockSource+0x44>)
 8000222:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	0c1b      	lsrs	r3, r3, #16
 800022a:	f003 031f 	and.w	r3, r3, #31
 800022e:	2103      	movs	r1, #3
 8000230:	fa01 f303 	lsl.w	r3, r1, r3
 8000234:	43db      	mvns	r3, r3
 8000236:	401a      	ands	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	b2d9      	uxtb	r1, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	0c1b      	lsrs	r3, r3, #16
 8000240:	f003 031f 	and.w	r3, r3, #31
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
 8000248:	4904      	ldr	r1, [pc, #16]	; (800025c <LL_RCC_SetADCClockSource+0x44>)
 800024a:	4313      	orrs	r3, r2
 800024c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000

08000260 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b08c      	sub	sp, #48	; 0x30
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2220      	movs	r2, #32
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f006 fbd5 	bl	8006a28 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800027e:	4b5e      	ldr	r3, [pc, #376]	; (80003f8 <MX_ADC1_Init+0x198>)
 8000280:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000284:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000286:	4b5c      	ldr	r3, [pc, #368]	; (80003f8 <MX_ADC1_Init+0x198>)
 8000288:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800028c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800028e:	4b5a      	ldr	r3, [pc, #360]	; (80003f8 <MX_ADC1_Init+0x198>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000294:	4b58      	ldr	r3, [pc, #352]	; (80003f8 <MX_ADC1_Init+0x198>)
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800029a:	4b57      	ldr	r3, [pc, #348]	; (80003f8 <MX_ADC1_Init+0x198>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002a0:	4b55      	ldr	r3, [pc, #340]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002a6:	4b54      	ldr	r3, [pc, #336]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002a8:	2204      	movs	r2, #4
 80002aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002ac:	4b52      	ldr	r3, [pc, #328]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002b2:	4b51      	ldr	r3, [pc, #324]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 7;
 80002b8:	4b4f      	ldr	r3, [pc, #316]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002ba:	2207      	movs	r2, #7
 80002bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002be:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80002c6:	4b4c      	ldr	r3, [pc, #304]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002c8:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80002cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80002ce:	4b4a      	ldr	r3, [pc, #296]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80002d6:	4b48      	ldr	r3, [pc, #288]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002d8:	2201      	movs	r2, #1
 80002da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80002de:	4b46      	ldr	r3, [pc, #280]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80002e4:	4b44      	ldr	r3, [pc, #272]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002ec:	4842      	ldr	r0, [pc, #264]	; (80003f8 <MX_ADC1_Init+0x198>)
 80002ee:	f002 fd81 	bl	8002df4 <HAL_ADC_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80002f8:	f001 f9ee 	bl	80016d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002fc:	2300      	movs	r3, #0
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000304:	4619      	mov	r1, r3
 8000306:	483c      	ldr	r0, [pc, #240]	; (80003f8 <MX_ADC1_Init+0x198>)
 8000308:	f003 fcdc 	bl	8003cc4 <HAL_ADCEx_MultiModeConfigChannel>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000312:	f001 f9e1 	bl	80016d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000316:	4b39      	ldr	r3, [pc, #228]	; (80003fc <MX_ADC1_Init+0x19c>)
 8000318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800031a:	2306      	movs	r3, #6
 800031c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800031e:	2301      	movs	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000322:	237f      	movs	r3, #127	; 0x7f
 8000324:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000326:	2304      	movs	r3, #4
 8000328:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4619      	mov	r1, r3
 8000332:	4831      	ldr	r0, [pc, #196]	; (80003f8 <MX_ADC1_Init+0x198>)
 8000334:	f002 ffba 	bl	80032ac <HAL_ADC_ConfigChannel>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800033e:	f001 f9cb 	bl	80016d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000342:	4b2f      	ldr	r3, [pc, #188]	; (8000400 <MX_ADC1_Init+0x1a0>)
 8000344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000346:	230c      	movs	r3, #12
 8000348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4619      	mov	r1, r3
 800034e:	482a      	ldr	r0, [pc, #168]	; (80003f8 <MX_ADC1_Init+0x198>)
 8000350:	f002 ffac 	bl	80032ac <HAL_ADC_ConfigChannel>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800035a:	f001 f9bd 	bl	80016d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800035e:	4b29      	ldr	r3, [pc, #164]	; (8000404 <MX_ADC1_Init+0x1a4>)
 8000360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000362:	2312      	movs	r3, #18
 8000364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	4823      	ldr	r0, [pc, #140]	; (80003f8 <MX_ADC1_Init+0x198>)
 800036c:	f002 ff9e 	bl	80032ac <HAL_ADC_ConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000376:	f001 f9af 	bl	80016d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800037a:	4b23      	ldr	r3, [pc, #140]	; (8000408 <MX_ADC1_Init+0x1a8>)
 800037c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800037e:	2318      	movs	r3, #24
 8000380:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	481c      	ldr	r0, [pc, #112]	; (80003f8 <MX_ADC1_Init+0x198>)
 8000388:	f002 ff90 	bl	80032ac <HAL_ADC_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000392:	f001 f9a1 	bl	80016d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000396:	4b1d      	ldr	r3, [pc, #116]	; (800040c <MX_ADC1_Init+0x1ac>)
 8000398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800039a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800039e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4619      	mov	r1, r3
 80003a4:	4814      	ldr	r0, [pc, #80]	; (80003f8 <MX_ADC1_Init+0x198>)
 80003a6:	f002 ff81 	bl	80032ac <HAL_ADC_ConfigChannel>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80003b0:	f001 f992 	bl	80016d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80003b4:	4b16      	ldr	r3, [pc, #88]	; (8000410 <MX_ADC1_Init+0x1b0>)
 80003b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80003b8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80003bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4619      	mov	r1, r3
 80003c2:	480d      	ldr	r0, [pc, #52]	; (80003f8 <MX_ADC1_Init+0x198>)
 80003c4:	f002 ff72 	bl	80032ac <HAL_ADC_ConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80003ce:	f001 f983 	bl	80016d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_ADC1_Init+0x1b4>)
 80003d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80003d6:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80003da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4619      	mov	r1, r3
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_ADC1_Init+0x198>)
 80003e2:	f002 ff63 	bl	80032ac <HAL_ADC_ConfigChannel>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 80003ec:	f001 f974 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	3730      	adds	r7, #48	; 0x30
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000028 	.word	0x20000028
 80003fc:	04300002 	.word	0x04300002
 8000400:	08600004 	.word	0x08600004
 8000404:	10c00010 	.word	0x10c00010
 8000408:	2e300800 	.word	0x2e300800
 800040c:	32601000 	.word	0x32601000
 8000410:	3ef08000 	.word	0x3ef08000
 8000414:	0c900008 	.word	0x0c900008

08000418 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800041e:	463b      	mov	r3, r7
 8000420:	2220      	movs	r2, #32
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f006 faff 	bl	8006a28 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <MX_ADC2_Init+0xc0>)
 800042c:	4a2b      	ldr	r2, [pc, #172]	; (80004dc <MX_ADC2_Init+0xc4>)
 800042e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000430:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <MX_ADC2_Init+0xc0>)
 8000432:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000436:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000438:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_ADC2_Init+0xc0>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800043e:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <MX_ADC2_Init+0xc0>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000444:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <MX_ADC2_Init+0xc0>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800044a:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <MX_ADC2_Init+0xc0>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000450:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <MX_ADC2_Init+0xc0>)
 8000452:	2204      	movs	r2, #4
 8000454:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000456:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <MX_ADC2_Init+0xc0>)
 8000458:	2200      	movs	r2, #0
 800045a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <MX_ADC2_Init+0xc0>)
 800045e:	2200      	movs	r2, #0
 8000460:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000462:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <MX_ADC2_Init+0xc0>)
 8000464:	2201      	movs	r2, #1
 8000466:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_ADC2_Init+0xc0>)
 800046a:	2200      	movs	r2, #0
 800046c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000470:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <MX_ADC2_Init+0xc0>)
 8000472:	2200      	movs	r2, #0
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000476:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_ADC2_Init+0xc0>)
 8000478:	2200      	movs	r2, #0
 800047a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <MX_ADC2_Init+0xc0>)
 800047e:	2200      	movs	r2, #0
 8000480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_ADC2_Init+0xc0>)
 8000486:	2200      	movs	r2, #0
 8000488:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_ADC2_Init+0xc0>)
 800048c:	2200      	movs	r2, #0
 800048e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000492:	4811      	ldr	r0, [pc, #68]	; (80004d8 <MX_ADC2_Init+0xc0>)
 8000494:	f002 fcae 	bl	8002df4 <HAL_ADC_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800049e:	f001 f91b 	bl	80016d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_ADC2_Init+0xc8>)
 80004a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004a6:	2306      	movs	r3, #6
 80004a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ae:	237f      	movs	r3, #127	; 0x7f
 80004b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004b2:	2304      	movs	r3, #4
 80004b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004ba:	463b      	mov	r3, r7
 80004bc:	4619      	mov	r1, r3
 80004be:	4806      	ldr	r0, [pc, #24]	; (80004d8 <MX_ADC2_Init+0xc0>)
 80004c0:	f002 fef4 	bl	80032ac <HAL_ADC_ConfigChannel>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80004ca:	f001 f905 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	3720      	adds	r7, #32
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000094 	.word	0x20000094
 80004dc:	50000100 	.word	0x50000100
 80004e0:	0c900008 	.word	0x0c900008

080004e4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08e      	sub	sp, #56	; 0x38
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000504:	d175      	bne.n	80005f2 <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 8000506:	4864      	ldr	r0, [pc, #400]	; (8000698 <HAL_ADC_MspInit+0x1b4>)
 8000508:	f7ff fe86 	bl	8000218 <LL_RCC_SetADCClockSource>

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800050c:	4b63      	ldr	r3, [pc, #396]	; (800069c <HAL_ADC_MspInit+0x1b8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	4a62      	ldr	r2, [pc, #392]	; (800069c <HAL_ADC_MspInit+0x1b8>)
 8000514:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000516:	4b61      	ldr	r3, [pc, #388]	; (800069c <HAL_ADC_MspInit+0x1b8>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d10b      	bne.n	8000536 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800051e:	4b60      	ldr	r3, [pc, #384]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a5f      	ldr	r2, [pc, #380]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000524:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b5d      	ldr	r3, [pc, #372]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000532:	623b      	str	r3, [r7, #32]
 8000534:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b5a      	ldr	r3, [pc, #360]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a59      	ldr	r2, [pc, #356]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	61fb      	str	r3, [r7, #28]
 800054c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b54      	ldr	r3, [pc, #336]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a53      	ldr	r2, [pc, #332]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	61bb      	str	r3, [r7, #24]
 8000564:	69bb      	ldr	r3, [r7, #24]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000566:	230f      	movs	r3, #15
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800056a:	2303      	movs	r3, #3
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000576:	4619      	mov	r1, r3
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f004 fb26 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12;
 8000580:	f241 0303 	movw	r3, #4099	; 0x1003
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000586:	2303      	movs	r3, #3
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000592:	4619      	mov	r1, r3
 8000594:	4843      	ldr	r0, [pc, #268]	; (80006a4 <HAL_ADC_MspInit+0x1c0>)
 8000596:	f004 fb19 	bl	8004bcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800059a:	4b43      	ldr	r3, [pc, #268]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 800059c:	4a43      	ldr	r2, [pc, #268]	; (80006ac <HAL_ADC_MspInit+0x1c8>)
 800059e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005a0:	4b41      	ldr	r3, [pc, #260]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005a2:	2205      	movs	r2, #5
 80005a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005a6:	4b40      	ldr	r3, [pc, #256]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ac:	4b3e      	ldr	r3, [pc, #248]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005b2:	4b3d      	ldr	r3, [pc, #244]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005b8:	4b3b      	ldr	r3, [pc, #236]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005c0:	4b39      	ldr	r3, [pc, #228]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005ca:	2220      	movs	r2, #32
 80005cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005ce:	4b36      	ldr	r3, [pc, #216]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005d4:	4834      	ldr	r0, [pc, #208]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005d6:	f003 fd29 	bl	800402c <HAL_DMA_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80005e0:	f001 f87a 	bl	80016d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a30      	ldr	r2, [pc, #192]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005e8:	655a      	str	r2, [r3, #84]	; 0x54
 80005ea:	4a2f      	ldr	r2, [pc, #188]	; (80006a8 <HAL_ADC_MspInit+0x1c4>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80005f0:	e04d      	b.n	800068e <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC2)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <HAL_ADC_MspInit+0x1cc>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d148      	bne.n	800068e <HAL_ADC_MspInit+0x1aa>
    LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 80005fc:	4826      	ldr	r0, [pc, #152]	; (8000698 <HAL_ADC_MspInit+0x1b4>)
 80005fe:	f7ff fe0b 	bl	8000218 <LL_RCC_SetADCClockSource>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <HAL_ADC_MspInit+0x1b8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a24      	ldr	r2, [pc, #144]	; (800069c <HAL_ADC_MspInit+0x1b8>)
 800060a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <HAL_ADC_MspInit+0x1b8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d10b      	bne.n	800062c <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 800061a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800061e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 800062e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 800063a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000648:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 800064a:	f043 0302 	orr.w	r3, r3, #2
 800064e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <HAL_ADC_MspInit+0x1bc>)
 8000652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000654:	f003 0302 	and.w	r3, r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800065c:	23c0      	movs	r3, #192	; 0xc0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000660:	2303      	movs	r3, #3
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	4619      	mov	r1, r3
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f004 faab 	bl	8004bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000676:	2304      	movs	r3, #4
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067a:	2303      	movs	r3, #3
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000686:	4619      	mov	r1, r3
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <HAL_ADC_MspInit+0x1c0>)
 800068a:	f004 fa9f 	bl	8004bcc <HAL_GPIO_Init>
}
 800068e:	bf00      	nop
 8000690:	3738      	adds	r7, #56	; 0x38
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	001c0002 	.word	0x001c0002
 800069c:	20000160 	.word	0x20000160
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000400 	.word	0x48000400
 80006a8:	20000100 	.word	0x20000100
 80006ac:	40020008 	.word	0x40020008
 80006b0:	50000100 	.word	0x50000100

080006b4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	43db      	mvns	r3, r3
 80006c4:	4904      	ldr	r1, [pc, #16]	; (80006d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40010400 	.word	0x40010400

080006dc <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LL_EXTI_DisableEvent_0_31+0x24>)
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	43db      	mvns	r3, r3
 80006ec:	4904      	ldr	r1, [pc, #16]	; (8000700 <LL_EXTI_DisableEvent_0_31+0x24>)
 80006ee:	4013      	ands	r3, r2
 80006f0:	604b      	str	r3, [r1, #4]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40010400 	.word	0x40010400

08000704 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800070e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000710:	4907      	ldr	r1, [pc, #28]	; (8000730 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4313      	orrs	r3, r2
 8000716:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800071a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4013      	ands	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000722:	68fb      	ldr	r3, [r7, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	40021000 	.word	0x40021000

08000734 <MX_COMP1_Init>:

/* USER CODE END 0 */

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN COMP1_Init 0 */

  /* USER CODE END COMP1_Init 0 */

  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
 8000758:	615a      	str	r2, [r3, #20]

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800075a:	2001      	movs	r0, #1
 800075c:	f7ff ffd2 	bl	8000704 <LL_AHB2_GRP1_EnableClock>
  /**COMP1 GPIO Configuration
  PA1   ------> COMP1_INP
  */
  GPIO_InitStruct.Pin = I_V_Pin;
 8000760:	2302      	movs	r3, #2
 8000762:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000764:	2303      	movs	r3, #3
 8000766:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(I_V_GPIO_Port, &GPIO_InitStruct);
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f005 f858 	bl	8005828 <LL_GPIO_Init>

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO1;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC3_CH1;
 800077c:	2340      	movs	r3, #64	; 0x40
 800077e:	623b      	str	r3, [r7, #32]
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  COMP_InitStruct.OutputPolarity = LL_COMP_OUTPUTPOL_NONINVERTED;
 8000784:	2300      	movs	r3, #0
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_COMP_Init(COMP1, &COMP_InitStruct);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	4811      	ldr	r0, [pc, #68]	; (80007d8 <MX_COMP1_Init+0xa4>)
 8000794:	f004 fbe2 	bl	8004f5c <LL_COMP_Init>

  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles */
  __IO uint32_t wait_loop_index = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_COMP1_Init+0xa8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <MX_COMP1_Init+0xac>)
 80007a2:	fba2 2303 	umull	r2, r3, r2, r3
 80007a6:	0cdb      	lsrs	r3, r3, #19
 80007a8:	22c8      	movs	r2, #200	; 0xc8
 80007aa:	fb02 f303 	mul.w	r3, r2, r3
 80007ae:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 80007b0:	e002      	b.n	80007b8 <MX_COMP1_Init+0x84>
  {
    wait_loop_index--;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f9      	bne.n	80007b2 <MX_COMP1_Init+0x7e>
  }
  LL_EXTI_DisableEvent_0_31(LL_EXTI_LINE_21);
 80007be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80007c2:	f7ff ff8b 	bl	80006dc <LL_EXTI_DisableEvent_0_31>
  LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_21);
 80007c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80007ca:	f7ff ff73 	bl	80006b4 <LL_EXTI_DisableIT_0_31>
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3730      	adds	r7, #48	; 0x30
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40010200 	.word	0x40010200
 80007dc:	20000000 	.word	0x20000000
 80007e0:	431bde83 	.word	0x431bde83

080007e4 <MX_COMP2_Init>:
/* COMP2 init function */
void MX_COMP2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN COMP2_Init 0 */

  /* USER CODE END COMP2_Init 0 */

  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
 8000808:	615a      	str	r2, [r3, #20]

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff ff7a 	bl	8000704 <LL_AHB2_GRP1_EnableClock>
  /**COMP2 GPIO Configuration
  PA3   ------> COMP2_INP
  */
  GPIO_InitStruct.Pin = I_W_Pin;
 8000810:	2308      	movs	r3, #8
 8000812:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000814:	2303      	movs	r3, #3
 8000816:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(I_W_GPIO_Port, &GPIO_InitStruct);
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f005 f800 	bl	8005828 <LL_GPIO_Init>

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO2;
 8000828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082c:	61fb      	str	r3, [r7, #28]
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC3_CH2;
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	623b      	str	r3, [r7, #32]
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_NONE;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  COMP_InitStruct.OutputPolarity = LL_COMP_OUTPUTPOL_NONINVERTED;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_COMP_Init(COMP2, &COMP_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4810      	ldr	r0, [pc, #64]	; (8000888 <MX_COMP2_Init+0xa4>)
 8000846:	f004 fb89 	bl	8004f5c <LL_COMP_Init>

  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles */
  __IO uint32_t wait_loop_index = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_COMP2_Init+0xa8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <MX_COMP2_Init+0xac>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	0cdb      	lsrs	r3, r3, #19
 800085a:	22c8      	movs	r2, #200	; 0xc8
 800085c:	fb02 f303 	mul.w	r3, r2, r3
 8000860:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8000862:	e002      	b.n	800086a <MX_COMP2_Init+0x86>
  {
    wait_loop_index--;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	3b01      	subs	r3, #1
 8000868:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1f9      	bne.n	8000864 <MX_COMP2_Init+0x80>
  }
  LL_EXTI_DisableEvent_0_31(LL_EXTI_LINE_22);
 8000870:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000874:	f7ff ff32 	bl	80006dc <LL_EXTI_DisableEvent_0_31>
  LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_22);
 8000878:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800087c:	f7ff ff1a 	bl	80006b4 <LL_EXTI_DisableIT_0_31>
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3730      	adds	r7, #48	; 0x30
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40010204 	.word	0x40010204
 800088c:	20000000 	.word	0x20000000
 8000890:	431bde83 	.word	0x431bde83

08000894 <MX_COMP3_Init>:
/* COMP3 init function */
void MX_COMP3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN COMP3_Init 0 */

  /* USER CODE END COMP3_Init 0 */

  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff ff22 	bl	8000704 <LL_AHB2_GRP1_EnableClock>
  /**COMP3 GPIO Configuration
  PA0   ------> COMP3_INP
  */
  GPIO_InitStruct.Pin = I_U_Pin;
 80008c0:	2301      	movs	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008c4:	2303      	movs	r3, #3
 80008c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(I_U_GPIO_Port, &GPIO_InitStruct);
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	f004 ffa8 	bl	8005828 <LL_GPIO_Init>

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO1;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC3_CH1;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	623b      	str	r3, [r7, #32]
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_NONE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  COMP_InitStruct.OutputPolarity = LL_COMP_OUTPUTPOL_NONINVERTED;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_COMP_Init(COMP3, &COMP_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_COMP3_Init+0xa4>)
 80008f4:	f004 fb32 	bl	8004f5c <LL_COMP_Init>

  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles */
  __IO uint32_t wait_loop_index = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_COMP3_Init+0xa8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <MX_COMP3_Init+0xac>)
 8000902:	fba2 2303 	umull	r2, r3, r2, r3
 8000906:	0cdb      	lsrs	r3, r3, #19
 8000908:	22c8      	movs	r2, #200	; 0xc8
 800090a:	fb02 f303 	mul.w	r3, r2, r3
 800090e:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8000910:	e002      	b.n	8000918 <MX_COMP3_Init+0x84>
  {
    wait_loop_index--;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	3b01      	subs	r3, #1
 8000916:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1f9      	bne.n	8000912 <MX_COMP3_Init+0x7e>
  }
  LL_EXTI_DisableEvent_0_31(LL_EXTI_LINE_29);
 800091e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000922:	f7ff fedb 	bl	80006dc <LL_EXTI_DisableEvent_0_31>
  LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_29);
 8000926:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800092a:	f7ff fec3 	bl	80006b4 <LL_EXTI_DisableIT_0_31>
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3730      	adds	r7, #48	; 0x30
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40010208 	.word	0x40010208
 800093c:	20000000 	.word	0x20000000
 8000940:	431bde83 	.word	0x431bde83

08000944 <LL_DAC_SetSignedFormat>:
  *         @arg @ref LL_DAC_SIGNED_FORMAT_ENABLE
  *         @arg @ref LL_DAC_SIGNED_FORMAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_DAC_SetSignedFormat(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t SignedFormat)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(DACx->MCR,
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	f003 0310 	and.w	r3, r3, #16
 800095a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	401a      	ands	r2, r3
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	431a      	orrs	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	63da      	str	r2, [r3, #60]	; 0x3c
             DAC_MCR_SINFORMAT1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK),
             SignedFormat << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <LL_DAC_DisableDMADoubleDataMode>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_DisableDMADoubleDataMode(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->MCR,
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	f003 0310 	and.w	r3, r3, #16
 8000998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099c:	fa01 f303 	lsl.w	r3, r1, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	401a      	ands	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	63da      	str	r2, [r3, #60]	; 0x3c
            DAC_MCR_DMADOUBLE1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <LL_DAC_DisableTrigger>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_DisableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->CR,
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	2102      	movs	r1, #2
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	401a      	ands	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	601a      	str	r2, [r3, #0]
            DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <LL_AHB2_GRP1_EnableClock>:
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80009ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80009fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4013      	ands	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	40021000 	.word	0x40021000

08000a14 <MX_DAC1_Init>:

/* USER CODE END 0 */

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_DAC1);
 8000a3e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000a42:	f7ff ffcf 	bl	80009e4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff ffcc 	bl	80009e4 <LL_AHB2_GRP1_EnableClock>
  /**DAC1 GPIO Configuration
  PA4   ------> DAC1_OUT1
  PA5   ------> DAC1_OUT2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a50:	2303      	movs	r3, #3
 8000a52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f004 fee2 	bl	8005828 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000a64:	2320      	movs	r3, #32
 8000a66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f004 fed6 	bl	8005828 <LL_GPIO_Init>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config
  */
  LL_DAC_SetSignedFormat(DAC1, LL_DAC_CHANNEL_1, LL_DAC_SIGNED_FORMAT_DISABLE);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	491b      	ldr	r1, [pc, #108]	; (8000aec <MX_DAC1_Init+0xd8>)
 8000a80:	481b      	ldr	r0, [pc, #108]	; (8000af0 <MX_DAC1_Init+0xdc>)
 8000a82:	f7ff ff5f 	bl	8000944 <LL_DAC_SetSignedFormat>
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.TriggerSource2 = LL_DAC_TRIG_SOFTWARE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 8000a96:	2301      	movs	r3, #1
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  DAC_InitStruct.OutputMode = LL_DAC_OUTPUT_MODE_NORMAL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4911      	ldr	r1, [pc, #68]	; (8000aec <MX_DAC1_Init+0xd8>)
 8000aa6:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MX_DAC1_Init+0xdc>)
 8000aa8:	f004 faa3 	bl	8004ff2 <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8000aac:	490f      	ldr	r1, [pc, #60]	; (8000aec <MX_DAC1_Init+0xd8>)
 8000aae:	4810      	ldr	r0, [pc, #64]	; (8000af0 <MX_DAC1_Init+0xdc>)
 8000ab0:	f7ff ff80 	bl	80009b4 <LL_DAC_DisableTrigger>
  LL_DAC_DisableDMADoubleDataMode(DAC1, LL_DAC_CHANNEL_1);
 8000ab4:	490d      	ldr	r1, [pc, #52]	; (8000aec <MX_DAC1_Init+0xd8>)
 8000ab6:	480e      	ldr	r0, [pc, #56]	; (8000af0 <MX_DAC1_Init+0xdc>)
 8000ab8:	f7ff ff64 	bl	8000984 <LL_DAC_DisableDMADoubleDataMode>
  /** DAC channel OUT2 config
  */
  LL_DAC_SetSignedFormat(DAC1, LL_DAC_CHANNEL_2, LL_DAC_SIGNED_FORMAT_DISABLE);
 8000abc:	2200      	movs	r2, #0
 8000abe:	490d      	ldr	r1, [pc, #52]	; (8000af4 <MX_DAC1_Init+0xe0>)
 8000ac0:	480b      	ldr	r0, [pc, #44]	; (8000af0 <MX_DAC1_Init+0xdc>)
 8000ac2:	f7ff ff3f 	bl	8000944 <LL_DAC_SetSignedFormat>
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	461a      	mov	r2, r3
 8000acc:	4909      	ldr	r1, [pc, #36]	; (8000af4 <MX_DAC1_Init+0xe0>)
 8000ace:	4808      	ldr	r0, [pc, #32]	; (8000af0 <MX_DAC1_Init+0xdc>)
 8000ad0:	f004 fa8f 	bl	8004ff2 <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC1, LL_DAC_CHANNEL_2);
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <MX_DAC1_Init+0xe0>)
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_DAC1_Init+0xdc>)
 8000ad8:	f7ff ff6c 	bl	80009b4 <LL_DAC_DisableTrigger>
  LL_DAC_DisableDMADoubleDataMode(DAC1, LL_DAC_CHANNEL_2);
 8000adc:	4905      	ldr	r1, [pc, #20]	; (8000af4 <MX_DAC1_Init+0xe0>)
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_DAC1_Init+0xdc>)
 8000ae0:	f7ff ff50 	bl	8000984 <LL_DAC_DisableDMADoubleDataMode>
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3738      	adds	r7, #56	; 0x38
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	02110001 	.word	0x02110001
 8000af0:	50000800 	.word	0x50000800
 8000af4:	354200f2 	.word	0x354200f2

08000af8 <MX_DAC3_Init>:
/* DAC3 init function */
void MX_DAC3_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_DAC3);
 8000b10:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b14:	f7ff ff66 	bl	80009e4 <LL_AHB2_GRP1_EnableClock>
  /* USER CODE BEGIN DAC3_Init 1 */

  /* USER CODE END DAC3_Init 1 */
  /** DAC channel OUT1 config
  */
  LL_DAC_SetSignedFormat(DAC3, LL_DAC_CHANNEL_1, LL_DAC_SIGNED_FORMAT_DISABLE);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	491a      	ldr	r1, [pc, #104]	; (8000b84 <MX_DAC3_Init+0x8c>)
 8000b1c:	481a      	ldr	r0, [pc, #104]	; (8000b88 <MX_DAC3_Init+0x90>)
 8000b1e:	f7ff ff11 	bl	8000944 <LL_DAC_SetSignedFormat>
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
  DAC_InitStruct.TriggerSource2 = LL_DAC_TRIG_SOFTWARE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_DISABLE;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	617b      	str	r3, [r7, #20]
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.OutputMode = LL_DAC_OUTPUT_MODE_NORMAL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  LL_DAC_Init(DAC3, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4911      	ldr	r1, [pc, #68]	; (8000b84 <MX_DAC3_Init+0x8c>)
 8000b40:	4811      	ldr	r0, [pc, #68]	; (8000b88 <MX_DAC3_Init+0x90>)
 8000b42:	f004 fa56 	bl	8004ff2 <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC3, LL_DAC_CHANNEL_1);
 8000b46:	490f      	ldr	r1, [pc, #60]	; (8000b84 <MX_DAC3_Init+0x8c>)
 8000b48:	480f      	ldr	r0, [pc, #60]	; (8000b88 <MX_DAC3_Init+0x90>)
 8000b4a:	f7ff ff33 	bl	80009b4 <LL_DAC_DisableTrigger>
  LL_DAC_DisableDMADoubleDataMode(DAC3, LL_DAC_CHANNEL_1);
 8000b4e:	490d      	ldr	r1, [pc, #52]	; (8000b84 <MX_DAC3_Init+0x8c>)
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_DAC3_Init+0x90>)
 8000b52:	f7ff ff17 	bl	8000984 <LL_DAC_DisableDMADoubleDataMode>
  /** DAC channel OUT2 config
  */
  LL_DAC_SetSignedFormat(DAC3, LL_DAC_CHANNEL_2, LL_DAC_SIGNED_FORMAT_DISABLE);
 8000b56:	2200      	movs	r2, #0
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <MX_DAC3_Init+0x94>)
 8000b5a:	480b      	ldr	r0, [pc, #44]	; (8000b88 <MX_DAC3_Init+0x90>)
 8000b5c:	f7ff fef2 	bl	8000944 <LL_DAC_SetSignedFormat>
  LL_DAC_Init(DAC3, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	461a      	mov	r2, r3
 8000b64:	4909      	ldr	r1, [pc, #36]	; (8000b8c <MX_DAC3_Init+0x94>)
 8000b66:	4808      	ldr	r0, [pc, #32]	; (8000b88 <MX_DAC3_Init+0x90>)
 8000b68:	f004 fa43 	bl	8004ff2 <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC3, LL_DAC_CHANNEL_2);
 8000b6c:	4907      	ldr	r1, [pc, #28]	; (8000b8c <MX_DAC3_Init+0x94>)
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_DAC3_Init+0x90>)
 8000b70:	f7ff ff20 	bl	80009b4 <LL_DAC_DisableTrigger>
  LL_DAC_DisableDMADoubleDataMode(DAC3, LL_DAC_CHANNEL_2);
 8000b74:	4905      	ldr	r1, [pc, #20]	; (8000b8c <MX_DAC3_Init+0x94>)
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_DAC3_Init+0x90>)
 8000b78:	f7ff ff04 	bl	8000984 <LL_DAC_DisableDMADoubleDataMode>
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	02110001 	.word	0x02110001
 8000b88:	50001000 	.word	0x50001000
 8000b8c:	354200f2 	.word	0x354200f2

08000b90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_DMA_Init+0x50>)
 8000b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b9a:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <MX_DMA_Init+0x50>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_DMA_Init+0x50>)
 8000ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_DMA_Init+0x50>)
 8000bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <MX_DMA_Init+0x50>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_DMA_Init+0x50>)
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	200b      	movs	r0, #11
 8000bcc:	f003 f9f9 	bl	8003fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bd0:	200b      	movs	r0, #11
 8000bd2:	f003 fa10 	bl	8003ff6 <HAL_NVIC_EnableIRQ>

}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <LL_RCC_SetFDCANClockSource>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_FDCANSEL, FDCANxSource);
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <LL_RCC_SetFDCANClockSource+0x28>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8000bf6:	4905      	ldr	r1, [pc, #20]	; (8000c0c <LL_RCC_SetFDCANClockSource+0x28>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000

08000c10 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c16:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <MX_FDCAN1_Init+0x88>)
 8000c18:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c40:	2214      	movs	r2, #20
 8000c42:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c52:	2202      	movs	r2, #2
 8000c54:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c82:	f003 fc45 	bl	8004510 <HAL_FDCAN_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000c8c:	f000 fd24 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000164 	.word	0x20000164
 8000c98:	40006400 	.word	0x40006400

08000c9c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <HAL_FDCAN_MspInit+0x98>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d135      	bne.n	8000d2a <HAL_FDCAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PCLK1);
 8000cbe:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000cc2:	f7ff ff8f 	bl	8000be4 <LL_RCC_SetFDCANClockSource>

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_FDCAN_MspInit+0x9c>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <HAL_FDCAN_MspInit+0x9c>)
 8000ccc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_FDCAN_MspInit+0x9c>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_FDCAN_MspInit+0x9c>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <HAL_FDCAN_MspInit+0x9c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_FDCAN_MspInit+0x9c>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cf6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d08:	2309      	movs	r3, #9
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f003 ff59 	bl	8004bcc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2015      	movs	r0, #21
 8000d20:	f003 f94f 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000d24:	2015      	movs	r0, #21
 8000d26:	f003 f966 	bl	8003ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40006400 	.word	0x40006400
 8000d38:	40021000 	.word	0x40021000

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	; (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <LL_AHB2_GRP1_EnableClock>:
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000

08000e80 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000e8a:	4a18      	ldr	r2, [pc, #96]	; (8000eec <LL_SYSCFG_SetEXTISource+0x6c>)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	3302      	adds	r3, #2
 8000e94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	0c1b      	lsrs	r3, r3, #16
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	ea02 0103 	and.w	r1, r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	0c1b      	lsrs	r3, r3, #16
 8000ea6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	fa93 f3a3 	rbit	r3, r3
 8000eae:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 8000eba:	2320      	movs	r3, #32
 8000ebc:	e003      	b.n	8000ec6 <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fab3 f383 	clz	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <LL_SYSCFG_SetEXTISource+0x6c>)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000ede:	bf00      	nop
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40010000 	.word	0x40010000

08000ef0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b08b      	sub	sp, #44	; 0x2c
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa93 f3a3 	rbit	r3, r3
 8000f0a:	613b      	str	r3, [r7, #16]
  return result;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000f16:	2320      	movs	r3, #32
 8000f18:	e003      	b.n	8000f22 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	fab3 f383 	clz	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2103      	movs	r1, #3
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	61fb      	str	r3, [r7, #28]
  return result;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000f44:	2320      	movs	r3, #32
 8000f46:	e003      	b.n	8000f50 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	fab3 f383 	clz	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	372c      	adds	r7, #44	; 0x2c
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b08b      	sub	sp, #44	; 0x2c
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	613b      	str	r3, [r7, #16]
  return result;
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000f90:	2320      	movs	r3, #32
 8000f92:	e003      	b.n	8000f9c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	fa93 f3a3 	rbit	r3, r3
 8000fb2:	61fb      	str	r3, [r7, #28]
  return result;
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000fbe:	2320      	movs	r3, #32
 8000fc0:	e003      	b.n	8000fca <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	fab3 f383 	clz	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	60da      	str	r2, [r3, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	372c      	adds	r7, #44	; 0x2c
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB0   ------> SharedAnalog_PB0
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001022:	2004      	movs	r0, #4
 8001024:	f7ff ff14 	bl	8000e50 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001028:	2020      	movs	r0, #32
 800102a:	f7ff ff11 	bl	8000e50 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff ff0e 	bl	8000e50 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001034:	2002      	movs	r0, #2
 8001036:	f7ff ff0b 	bl	8000e50 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TP3_GPIO_Port, TP3_Pin);
 800103a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f7ff ffcf 	bl	8000fe4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TP2_GPIO_Port, TP2_Pin);
 8001046:	2108      	movs	r1, #8
 8001048:	4844      	ldr	r0, [pc, #272]	; (800115c <MX_GPIO_Init+0x15c>)
 800104a:	f7ff ffcb 	bl	8000fe4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TP1_GPIO_Port, TP1_Pin);
 800104e:	2110      	movs	r1, #16
 8001050:	4842      	ldr	r0, [pc, #264]	; (800115c <MX_GPIO_Init+0x15c>)
 8001052:	f7ff ffc7 	bl	8000fe4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(STB_GPIO_Port, STB_Pin);
 8001056:	2120      	movs	r1, #32
 8001058:	4840      	ldr	r0, [pc, #256]	; (800115c <MX_GPIO_Init+0x15c>)
 800105a:	f7ff ffc3 	bl	8000fe4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800105e:	4940      	ldr	r1, [pc, #256]	; (8001160 <MX_GPIO_Init+0x160>)
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff ff0d 	bl	8000e80 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800106c:	2301      	movs	r3, #1
 800106e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001072:	2300      	movs	r3, #0
 8001074:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001078:	2303      	movs	r3, #3
 800107a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4618      	mov	r0, r3
 8001084:	f004 f98c 	bl	80053a0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BRAKE_GPIO_Port, BRAKE_Pin, LL_GPIO_PULL_NO);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108e:	4835      	ldr	r0, [pc, #212]	; (8001164 <MX_GPIO_Init+0x164>)
 8001090:	f7ff ff6b 	bl	8000f6a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BRAKE_GPIO_Port, BRAKE_Pin, LL_GPIO_MODE_INPUT);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109a:	4832      	ldr	r0, [pc, #200]	; (8001164 <MX_GPIO_Init+0x164>)
 800109c:	f7ff ff28 	bl	8000ef0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = V_SYS_Pin;
 80010a0:	2301      	movs	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80010a4:	2303      	movs	r3, #3
 80010a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(V_SYS_GPIO_Port, &GPIO_InitStruct);
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	482a      	ldr	r0, [pc, #168]	; (800115c <MX_GPIO_Init+0x15c>)
 80010b2:	f004 fbb9 	bl	8005828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TP3_Pin;
 80010b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010bc:	2301      	movs	r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TP3_GPIO_Port, &GPIO_InitStruct);
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f004 fba8 	bl	8005828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TP2_Pin;
 80010d8:	2308      	movs	r3, #8
 80010da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010dc:	2301      	movs	r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TP2_GPIO_Port, &GPIO_InitStruct);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	481a      	ldr	r0, [pc, #104]	; (800115c <MX_GPIO_Init+0x15c>)
 80010f2:	f004 fb99 	bl	8005828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TP1_Pin;
 80010f6:	2310      	movs	r3, #16
 80010f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010fa:	2301      	movs	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4813      	ldr	r0, [pc, #76]	; (800115c <MX_GPIO_Init+0x15c>)
 8001110:	f004 fb8a 	bl	8005828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = STB_Pin;
 8001114:	2320      	movs	r3, #32
 8001116:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001118:	2301      	movs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(STB_GPIO_Port, &GPIO_InitStruct);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <MX_GPIO_Init+0x15c>)
 800112e:	f004 fb7b 	bl	8005828 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001132:	f7ff fe03 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8001136:	4603      	mov	r3, r0
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fe53 	bl	8000de8 <NVIC_EncodePriority>
 8001142:	4603      	mov	r3, r0
 8001144:	4619      	mov	r1, r3
 8001146:	2028      	movs	r0, #40	; 0x28
 8001148:	f7ff fe24 	bl	8000d94 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800114c:	2028      	movs	r0, #40	; 0x28
 800114e:	f7ff fe03 	bl	8000d58 <__NVIC_EnableIRQ>

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	48000400 	.word	0x48000400
 8001160:	00f00003 	.word	0x00f00003
 8001164:	48000800 	.word	0x48000800

08001168 <LL_RCC_HSE_Enable>:
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <LL_RCC_HSE_Enable+0x1c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <LL_RCC_HSE_Enable+0x1c>)
 8001172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000

08001188 <LL_RCC_HSE_IsReady>:
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <LL_RCC_HSE_IsReady+0x24>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001198:	d101      	bne.n	800119e <LL_RCC_HSE_IsReady+0x16>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <LL_RCC_HSE_IsReady+0x18>
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <LL_RCC_SetSysClkSource>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <LL_RCC_SetSysClkSource+0x24>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f023 0203 	bic.w	r2, r3, #3
 80011c0:	4904      	ldr	r1, [pc, #16]	; (80011d4 <LL_RCC_SetSysClkSource+0x24>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000

080011d8 <LL_RCC_GetSysClkSource>:
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <LL_RCC_GetSysClkSource+0x18>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 030c 	and.w	r3, r3, #12
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <LL_RCC_SetAHBPrescaler>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <LL_RCC_SetAHBPrescaler+0x24>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001204:	4904      	ldr	r1, [pc, #16]	; (8001218 <LL_RCC_SetAHBPrescaler+0x24>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4313      	orrs	r3, r2
 800120a:	608b      	str	r3, [r1, #8]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000

0800121c <LL_RCC_SetAPB1Prescaler>:
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800122c:	4904      	ldr	r1, [pc, #16]	; (8001240 <LL_RCC_SetAPB1Prescaler+0x24>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4313      	orrs	r3, r2
 8001232:	608b      	str	r3, [r1, #8]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000

08001244 <LL_RCC_SetAPB2Prescaler>:
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <LL_RCC_SetAPB2Prescaler+0x24>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001254:	4904      	ldr	r1, [pc, #16]	; (8001268 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	608b      	str	r3, [r1, #8]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000

0800126c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <LL_RCC_PLL_Enable+0x1c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <LL_RCC_PLL_Enable+0x1c>)
 8001276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <LL_RCC_PLL_IsReady+0x24>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800129c:	d101      	bne.n	80012a2 <LL_RCC_PLL_IsReady+0x16>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <LL_RCC_PLL_IsReady+0x18>
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	68f9      	ldr	r1, [r7, #12]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	4311      	orrs	r1, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	0212      	lsls	r2, r2, #8
 80012d4:	4311      	orrs	r1, r2
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	4904      	ldr	r1, [pc, #16]	; (80012ec <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000
 80012f0:	f9ff800c 	.word	0xf9ff800c

080012f4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80012fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <LL_FLASH_SetLatency+0x24>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 020f 	bic.w	r2, r3, #15
 8001324:	4904      	ldr	r1, [pc, #16]	; (8001338 <LL_FLASH_SetLatency+0x24>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40022000 	.word	0x40022000

0800133c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <LL_FLASH_GetLatency+0x18>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 030f 	and.w	r3, r3, #15
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40022000 	.word	0x40022000

08001358 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001368:	4904      	ldr	r1, [pc, #16]	; (800137c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40007000 	.word	0x40007000

08001380 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f06f 0201 	mvn.w	r2, #1
 80013ee:	611a      	str	r2, [r3, #16]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f043 0201 	orr.w	r2, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	60da      	str	r2, [r3, #12]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f001 fa31 	bl	8002886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f8f4 	bl	8001610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f7ff fdea 	bl	8001000 <MX_GPIO_Init>
  MX_DMA_Init();
 800142c:	f7ff fbb0 	bl	8000b90 <MX_DMA_Init>
  MX_ADC2_Init();
 8001430:	f7fe fff2 	bl	8000418 <MX_ADC2_Init>
  MX_COMP1_Init();
 8001434:	f7ff f97e 	bl	8000734 <MX_COMP1_Init>
  MX_COMP2_Init();
 8001438:	f7ff f9d4 	bl	80007e4 <MX_COMP2_Init>
  MX_COMP3_Init();
 800143c:	f7ff fa2a 	bl	8000894 <MX_COMP3_Init>
  MX_ADC1_Init();
 8001440:	f7fe ff0e 	bl	8000260 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001444:	f7ff fae6 	bl	8000a14 <MX_DAC1_Init>
  MX_DAC3_Init();
 8001448:	f7ff fb56 	bl	8000af8 <MX_DAC3_Init>
  MX_FDCAN1_Init();
 800144c:	f7ff fbe0 	bl	8000c10 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8001450:	f000 fd8a 	bl	8001f68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001454:	f000 feec 	bl	8002230 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001458:	f000 ff2e 	bl	80022b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800145c:	f000 ff6c 	bl	8002338 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001460:	f001 f82c 	bl	80024bc <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001464:	f001 f966 	bl	8002734 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  update_1khz();
 8001468:	f000 f822 	bl	80014b0 <update_1khz>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800146c:	e7fe      	b.n	800146c <main+0x50>
	...

08001470 <TIM8_UP_IRQHandler>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

 void TIM8_UP_IRQHandler(void){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

	get_duty_value();
 8001474:	f000 f828 	bl	80014c8 <get_duty_value>
	set_freq_pwm(FREQ_PWM_HZ);
 8001478:	f644 6020 	movw	r0, #20000	; 0x4e20
 800147c:	f000 f862 	bl	8001544 <set_freq_pwm>
	set_deadtime_pwm_ns(DEAD_TIME_NS);
 8001480:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001484:	f000 f876 	bl	8001574 <set_deadtime_pwm_ns>
	set_duty_pwm(duty);
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <TIM8_UP_IRQHandler+0x38>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001494:	eeb0 0a67 	vmov.f32	s0, s15
 8001498:	f000 f890 	bl	80015bc <set_duty_pwm>
	LL_TIM_ClearFlag_UPDATE(TIM8);
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <TIM8_UP_IRQHandler+0x3c>)
 800149e:	f7ff ff9f 	bl	80013e0 <LL_TIM_ClearFlag_UPDATE>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200001e8 	.word	0x200001e8
 80014ac:	40013400 	.word	0x40013400

080014b0 <update_1khz>:

void update_1khz(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

	LL_TIM_EnableIT_UPDATE(TIM8);
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <update_1khz+0x14>)
 80014b6:	f7ff ffa1 	bl	80013fc <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM8);
 80014ba:	4802      	ldr	r0, [pc, #8]	; (80014c4 <update_1khz+0x14>)
 80014bc:	f7ff ff60 	bl	8001380 <LL_TIM_EnableCounter>

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40013400 	.word	0x40013400

080014c8 <get_duty_value>:

float get_duty_value(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_values, 7)== HAL_OK){
 80014cc:	2207      	movs	r2, #7
 80014ce:	4917      	ldr	r1, [pc, #92]	; (800152c <get_duty_value+0x64>)
 80014d0:	4817      	ldr	r0, [pc, #92]	; (8001530 <get_duty_value+0x68>)
 80014d2:	f001 fe19 	bl	8003108 <HAL_ADC_Start_DMA>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10c      	bne.n	80014f6 <get_duty_value+0x2e>

		throttle_adc = adc_values[3] / 4095.0f ;
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <get_duty_value+0x64>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001534 <get_duty_value+0x6c>
 80014ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <get_duty_value+0x70>)
 80014f2:	edc3 7a00 	vstr	s15, [r3]
	}

	duty = (throttle_adc *TIM1->ARR);
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <get_duty_value+0x74>)
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <get_duty_value+0x70>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001510:	ee17 2a90 	vmov	r2, s15
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <get_duty_value+0x78>)
 8001516:	601a      	str	r2, [r3, #0]
	return duty ;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <get_duty_value+0x78>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200001c8 	.word	0x200001c8
 8001530:	20000028 	.word	0x20000028
 8001534:	457ff000 	.word	0x457ff000
 8001538:	200001e4 	.word	0x200001e4
 800153c:	40012c00 	.word	0x40012c00
 8001540:	200001e8 	.word	0x200001e8

08001544 <set_freq_pwm>:
//WRITE_REG(TIMx->CCR1, CompareValue);

void set_freq_pwm(uint32_t freq){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

	uint32_t result = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
	result = (HAL_RCC_GetPCLK2Freq() / freq /2 );
 8001550:	f003 fcda 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 8001554:	4602      	mov	r2, r0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	fbb2 f3f3 	udiv	r3, r2, r3
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
	TIM1->ARR = result;
 8001560:	4a03      	ldr	r2, [pc, #12]	; (8001570 <set_freq_pwm+0x2c>)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40012c00 	.word	0x40012c00

08001574 <set_deadtime_pwm_ns>:

void set_deadtime_pwm_ns(uint32_t time_ns){
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

	uint32_t time_s = time_ns / 1000000000UL ;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	0a5b      	lsrs	r3, r3, #9
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <set_deadtime_pwm_ns+0x40>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	09db      	lsrs	r3, r3, #7
 8001588:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
	result = (time_s * HAL_RCC_GetPCLK2Freq());
 800158e:	f003 fcbb 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 8001592:	4602      	mov	r2, r0
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	60bb      	str	r3, [r7, #8]
	MODIFY_REG(TIM1->BDTR, TIM_BDTR_DTG, result);
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <set_deadtime_pwm_ns+0x44>)
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80015a4:	4904      	ldr	r1, [pc, #16]	; (80015b8 <set_deadtime_pwm_ns+0x44>)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	644b      	str	r3, [r1, #68]	; 0x44
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	00044b83 	.word	0x00044b83
 80015b8:	40012c00 	.word	0x40012c00

080015bc <set_duty_pwm>:

void set_duty_pwm(float duty){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	ed87 0a01 	vstr	s0, [r7, #4]

	LL_TIM_DisableAllOutputs(TIM1);
 80015c6:	4811      	ldr	r0, [pc, #68]	; (800160c <set_duty_pwm+0x50>)
 80015c8:	f7ff fefa 	bl	80013c0 <LL_TIM_DisableAllOutputs>
	TIM1->CCR1 = duty ;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <set_duty_pwm+0x50>)
 80015ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d6:	ee17 2a90 	vmov	r2, s15
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = duty ;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <set_duty_pwm+0x50>)
 80015de:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e6:	ee17 2a90 	vmov	r2, s15
 80015ea:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = duty ;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <set_duty_pwm+0x50>)
 80015ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f6:	ee17 2a90 	vmov	r2, s15
 80015fa:	63da      	str	r2, [r3, #60]	; 0x3c
	LL_TIM_EnableAllOutputs(TIM1);
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <set_duty_pwm+0x50>)
 80015fe:	f7ff fecf 	bl	80013a0 <LL_TIM_EnableAllOutputs>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40012c00 	.word	0x40012c00

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001614:	2004      	movs	r0, #4
 8001616:	f7ff fe7d 	bl	8001314 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 800161a:	bf00      	nop
 800161c:	f7ff fe8e 	bl	800133c <LL_FLASH_GetLatency>
 8001620:	4603      	mov	r3, r0
 8001622:	2b04      	cmp	r3, #4
 8001624:	d1fa      	bne.n	800161c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001626:	f44f 7000 	mov.w	r0, #512	; 0x200
 800162a:	f7ff fe95 	bl	8001358 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800162e:	f7ff fd9b 	bl	8001168 <LL_RCC_HSE_Enable>
   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001632:	bf00      	nop
 8001634:	f7ff fda8 	bl	8001188 <LL_RCC_HSE_IsReady>
 8001638:	4603      	mov	r3, r0
 800163a:	2b01      	cmp	r3, #1
 800163c:	d1fa      	bne.n	8001634 <SystemClock_Config+0x24>
  {
  }

  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 25, LL_RCC_PLLR_DIV_2);
 800163e:	2300      	movs	r3, #0
 8001640:	2219      	movs	r2, #25
 8001642:	2100      	movs	r1, #0
 8001644:	2003      	movs	r0, #3
 8001646:	f7ff fe35 	bl	80012b4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 800164a:	f7ff fe53 	bl	80012f4 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 800164e:	f7ff fe0d 	bl	800126c <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001652:	bf00      	nop
 8001654:	f7ff fe1a 	bl	800128c <LL_RCC_PLL_IsReady>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d1fa      	bne.n	8001654 <SystemClock_Config+0x44>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800165e:	2003      	movs	r0, #3
 8001660:	f7ff fda6 	bl	80011b0 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8001664:	2080      	movs	r0, #128	; 0x80
 8001666:	f7ff fdc5 	bl	80011f4 <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800166a:	bf00      	nop
 800166c:	f7ff fdb4 	bl	80011d8 <LL_RCC_GetSysClkSource>
 8001670:	4603      	mov	r3, r0
 8001672:	2b0c      	cmp	r3, #12
 8001674:	d1fa      	bne.n	800166c <SystemClock_Config+0x5c>
  {
  }

  /* Insure 1�s transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <SystemClock_Config+0xbc>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	4a14      	ldr	r2, [pc, #80]	; (80016cc <SystemClock_Config+0xbc>)
 800167c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001680:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <SystemClock_Config+0xc0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <SystemClock_Config+0xc0>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <SystemClock_Config+0xc0>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
  while(DWT->CYCCNT < 100);
 8001694:	bf00      	nop
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <SystemClock_Config+0xc0>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b63      	cmp	r3, #99	; 0x63
 800169c:	d9fb      	bls.n	8001696 <SystemClock_Config+0x86>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800169e:	2000      	movs	r0, #0
 80016a0:	f7ff fda8 	bl	80011f4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff fdb9 	bl	800121c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f7ff fdca 	bl	8001244 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(150000000);
 80016b0:	4808      	ldr	r0, [pc, #32]	; (80016d4 <SystemClock_Config+0xc4>)
 80016b2:	f005 f985 	bl	80069c0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80016b6:	200f      	movs	r0, #15
 80016b8:	f001 f8fe 	bl	80028b8 <HAL_InitTick>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80016c2:	f000 f809 	bl	80016d8 <Error_Handler>
  }
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000edf0 	.word	0xe000edf0
 80016d0:	e0001000 	.word	0xe0001000
 80016d4:	08f0d180 	.word	0x08f0d180

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_MspInit+0x4c>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <HAL_MspInit+0x4c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6613      	str	r3, [r2, #96]	; 0x60
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_MspInit+0x4c>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_MspInit+0x4c>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_MspInit+0x4c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6593      	str	r3, [r2, #88]	; 0x58
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_MspInit+0x4c>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800171a:	f001 f939 	bl	8002990 <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800171e:	2002      	movs	r0, #2
 8001720:	f001 f922 	bl	8002968 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001724:	f003 fbd4 	bl	8004ed0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f001 f8d4 	bl	800292c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA1_Channel1_IRQHandler+0x10>)
 800178e:	f002 fd70 	bl	8004272 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000100 	.word	0x20000100

0800179c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <FDCAN1_IT0_IRQHandler+0x10>)
 80017a2:	f003 f80f 	bl	80047c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000164 	.word	0x20000164

080017b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <SystemInit+0x20>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <SystemInit+0x20>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <LL_AHB2_GRP1_EnableClock>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80018f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80018fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000

08001918 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001922:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <LL_APB1_GRP1_EnableClock+0x2c>)
 800192e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4013      	ands	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40021000 	.word	0x40021000

08001948 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001952:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <LL_APB2_GRP1_EnableClock+0x2c>)
 800195e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4013      	ands	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000

08001978 <LL_TIM_EnableARRPreload>:
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_TIM_DisableARRPreload>:
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_TIM_OC_DisableFast>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d02e      	beq.n	8001a26 <LL_TIM_OC_DisableFast+0x6e>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d029      	beq.n	8001a22 <LL_TIM_OC_DisableFast+0x6a>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2b10      	cmp	r3, #16
 80019d2:	d024      	beq.n	8001a1e <LL_TIM_OC_DisableFast+0x66>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d01f      	beq.n	8001a1a <LL_TIM_OC_DisableFast+0x62>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e0:	d019      	beq.n	8001a16 <LL_TIM_OC_DisableFast+0x5e>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e8:	d013      	beq.n	8001a12 <LL_TIM_OC_DisableFast+0x5a>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f0:	d00d      	beq.n	8001a0e <LL_TIM_OC_DisableFast+0x56>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019f8:	d007      	beq.n	8001a0a <LL_TIM_OC_DisableFast+0x52>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a00:	d101      	bne.n	8001a06 <LL_TIM_OC_DisableFast+0x4e>
 8001a02:	2308      	movs	r3, #8
 8001a04:	e010      	b.n	8001a28 <LL_TIM_OC_DisableFast+0x70>
 8001a06:	2309      	movs	r3, #9
 8001a08:	e00e      	b.n	8001a28 <LL_TIM_OC_DisableFast+0x70>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e00c      	b.n	8001a28 <LL_TIM_OC_DisableFast+0x70>
 8001a0e:	2306      	movs	r3, #6
 8001a10:	e00a      	b.n	8001a28 <LL_TIM_OC_DisableFast+0x70>
 8001a12:	2305      	movs	r3, #5
 8001a14:	e008      	b.n	8001a28 <LL_TIM_OC_DisableFast+0x70>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e006      	b.n	8001a28 <LL_TIM_OC_DisableFast+0x70>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e004      	b.n	8001a28 <LL_TIM_OC_DisableFast+0x70>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e002      	b.n	8001a28 <LL_TIM_OC_DisableFast+0x70>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <LL_TIM_OC_DisableFast+0x70>
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	4619      	mov	r1, r3
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LL_TIM_OC_DisableFast+0xa8>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	440b      	add	r3, r1
 8001a38:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	4908      	ldr	r1, [pc, #32]	; (8001a64 <LL_TIM_OC_DisableFast+0xac>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	4619      	mov	r1, r3
 8001a46:	2304      	movs	r3, #4
 8001a48:	408b      	lsls	r3, r1
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	08006a68 	.word	0x08006a68
 8001a64:	08006a74 	.word	0x08006a74

08001a68 <LL_TIM_OC_EnablePreload>:
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d02e      	beq.n	8001ad6 <LL_TIM_OC_EnablePreload+0x6e>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d029      	beq.n	8001ad2 <LL_TIM_OC_EnablePreload+0x6a>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d024      	beq.n	8001ace <LL_TIM_OC_EnablePreload+0x66>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b40      	cmp	r3, #64	; 0x40
 8001a88:	d01f      	beq.n	8001aca <LL_TIM_OC_EnablePreload+0x62>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a90:	d019      	beq.n	8001ac6 <LL_TIM_OC_EnablePreload+0x5e>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a98:	d013      	beq.n	8001ac2 <LL_TIM_OC_EnablePreload+0x5a>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa0:	d00d      	beq.n	8001abe <LL_TIM_OC_EnablePreload+0x56>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aa8:	d007      	beq.n	8001aba <LL_TIM_OC_EnablePreload+0x52>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d101      	bne.n	8001ab6 <LL_TIM_OC_EnablePreload+0x4e>
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	e010      	b.n	8001ad8 <LL_TIM_OC_EnablePreload+0x70>
 8001ab6:	2309      	movs	r3, #9
 8001ab8:	e00e      	b.n	8001ad8 <LL_TIM_OC_EnablePreload+0x70>
 8001aba:	2307      	movs	r3, #7
 8001abc:	e00c      	b.n	8001ad8 <LL_TIM_OC_EnablePreload+0x70>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e00a      	b.n	8001ad8 <LL_TIM_OC_EnablePreload+0x70>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <LL_TIM_OC_EnablePreload+0x70>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <LL_TIM_OC_EnablePreload+0x70>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <LL_TIM_OC_EnablePreload+0x70>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <LL_TIM_OC_EnablePreload+0x70>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <LL_TIM_OC_EnablePreload+0x70>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3318      	adds	r3, #24
 8001ade:	4619      	mov	r1, r3
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <LL_TIM_OC_EnablePreload+0xa4>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	440b      	add	r3, r1
 8001ae8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <LL_TIM_OC_EnablePreload+0xa8>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	4619      	mov	r1, r3
 8001af6:	2308      	movs	r3, #8
 8001af8:	408b      	lsls	r3, r1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	08006a68 	.word	0x08006a68
 8001b10:	08006a74 	.word	0x08006a74

08001b14 <LL_TIM_IC_SetActiveInput>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d02e      	beq.n	8001b84 <LL_TIM_IC_SetActiveInput+0x70>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d029      	beq.n	8001b80 <LL_TIM_IC_SetActiveInput+0x6c>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d024      	beq.n	8001b7c <LL_TIM_IC_SetActiveInput+0x68>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b40      	cmp	r3, #64	; 0x40
 8001b36:	d01f      	beq.n	8001b78 <LL_TIM_IC_SetActiveInput+0x64>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3e:	d019      	beq.n	8001b74 <LL_TIM_IC_SetActiveInput+0x60>
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d013      	beq.n	8001b70 <LL_TIM_IC_SetActiveInput+0x5c>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b4e:	d00d      	beq.n	8001b6c <LL_TIM_IC_SetActiveInput+0x58>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b56:	d007      	beq.n	8001b68 <LL_TIM_IC_SetActiveInput+0x54>
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5e:	d101      	bne.n	8001b64 <LL_TIM_IC_SetActiveInput+0x50>
 8001b60:	2308      	movs	r3, #8
 8001b62:	e010      	b.n	8001b86 <LL_TIM_IC_SetActiveInput+0x72>
 8001b64:	2309      	movs	r3, #9
 8001b66:	e00e      	b.n	8001b86 <LL_TIM_IC_SetActiveInput+0x72>
 8001b68:	2307      	movs	r3, #7
 8001b6a:	e00c      	b.n	8001b86 <LL_TIM_IC_SetActiveInput+0x72>
 8001b6c:	2306      	movs	r3, #6
 8001b6e:	e00a      	b.n	8001b86 <LL_TIM_IC_SetActiveInput+0x72>
 8001b70:	2305      	movs	r3, #5
 8001b72:	e008      	b.n	8001b86 <LL_TIM_IC_SetActiveInput+0x72>
 8001b74:	2304      	movs	r3, #4
 8001b76:	e006      	b.n	8001b86 <LL_TIM_IC_SetActiveInput+0x72>
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e004      	b.n	8001b86 <LL_TIM_IC_SetActiveInput+0x72>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e002      	b.n	8001b86 <LL_TIM_IC_SetActiveInput+0x72>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <LL_TIM_IC_SetActiveInput+0x72>
 8001b84:	2300      	movs	r3, #0
 8001b86:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3318      	adds	r3, #24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <LL_TIM_IC_SetActiveInput+0xb8>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	440b      	add	r3, r1
 8001b96:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <LL_TIM_IC_SetActiveInput+0xbc>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	408b      	lsls	r3, r1
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	7df9      	ldrb	r1, [r7, #23]
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <LL_TIM_IC_SetActiveInput+0xbc>)
 8001bb4:	5c41      	ldrb	r1, [r0, r1]
 8001bb6:	408b      	lsls	r3, r1
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	601a      	str	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	08006a68 	.word	0x08006a68
 8001bd0:	08006a80 	.word	0x08006a80

08001bd4 <LL_TIM_IC_SetPrescaler>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d02e      	beq.n	8001c44 <LL_TIM_IC_SetPrescaler+0x70>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d029      	beq.n	8001c40 <LL_TIM_IC_SetPrescaler+0x6c>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d024      	beq.n	8001c3c <LL_TIM_IC_SetPrescaler+0x68>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b40      	cmp	r3, #64	; 0x40
 8001bf6:	d01f      	beq.n	8001c38 <LL_TIM_IC_SetPrescaler+0x64>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bfe:	d019      	beq.n	8001c34 <LL_TIM_IC_SetPrescaler+0x60>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c06:	d013      	beq.n	8001c30 <LL_TIM_IC_SetPrescaler+0x5c>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0e:	d00d      	beq.n	8001c2c <LL_TIM_IC_SetPrescaler+0x58>
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c16:	d007      	beq.n	8001c28 <LL_TIM_IC_SetPrescaler+0x54>
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1e:	d101      	bne.n	8001c24 <LL_TIM_IC_SetPrescaler+0x50>
 8001c20:	2308      	movs	r3, #8
 8001c22:	e010      	b.n	8001c46 <LL_TIM_IC_SetPrescaler+0x72>
 8001c24:	2309      	movs	r3, #9
 8001c26:	e00e      	b.n	8001c46 <LL_TIM_IC_SetPrescaler+0x72>
 8001c28:	2307      	movs	r3, #7
 8001c2a:	e00c      	b.n	8001c46 <LL_TIM_IC_SetPrescaler+0x72>
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	e00a      	b.n	8001c46 <LL_TIM_IC_SetPrescaler+0x72>
 8001c30:	2305      	movs	r3, #5
 8001c32:	e008      	b.n	8001c46 <LL_TIM_IC_SetPrescaler+0x72>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e006      	b.n	8001c46 <LL_TIM_IC_SetPrescaler+0x72>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e004      	b.n	8001c46 <LL_TIM_IC_SetPrescaler+0x72>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e002      	b.n	8001c46 <LL_TIM_IC_SetPrescaler+0x72>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <LL_TIM_IC_SetPrescaler+0x72>
 8001c44:	2300      	movs	r3, #0
 8001c46:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3318      	adds	r3, #24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <LL_TIM_IC_SetPrescaler+0xb8>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	440b      	add	r3, r1
 8001c56:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	490c      	ldr	r1, [pc, #48]	; (8001c90 <LL_TIM_IC_SetPrescaler+0xbc>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	4619      	mov	r1, r3
 8001c64:	230c      	movs	r3, #12
 8001c66:	408b      	lsls	r3, r1
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	7df9      	ldrb	r1, [r7, #23]
 8001c72:	4807      	ldr	r0, [pc, #28]	; (8001c90 <LL_TIM_IC_SetPrescaler+0xbc>)
 8001c74:	5c41      	ldrb	r1, [r0, r1]
 8001c76:	408b      	lsls	r3, r1
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	08006a68 	.word	0x08006a68
 8001c90:	08006a80 	.word	0x08006a80

08001c94 <LL_TIM_IC_SetFilter>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d02e      	beq.n	8001d04 <LL_TIM_IC_SetFilter+0x70>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d029      	beq.n	8001d00 <LL_TIM_IC_SetFilter+0x6c>
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d024      	beq.n	8001cfc <LL_TIM_IC_SetFilter+0x68>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d01f      	beq.n	8001cf8 <LL_TIM_IC_SetFilter+0x64>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cbe:	d019      	beq.n	8001cf4 <LL_TIM_IC_SetFilter+0x60>
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc6:	d013      	beq.n	8001cf0 <LL_TIM_IC_SetFilter+0x5c>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cce:	d00d      	beq.n	8001cec <LL_TIM_IC_SetFilter+0x58>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cd6:	d007      	beq.n	8001ce8 <LL_TIM_IC_SetFilter+0x54>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d101      	bne.n	8001ce4 <LL_TIM_IC_SetFilter+0x50>
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	e010      	b.n	8001d06 <LL_TIM_IC_SetFilter+0x72>
 8001ce4:	2309      	movs	r3, #9
 8001ce6:	e00e      	b.n	8001d06 <LL_TIM_IC_SetFilter+0x72>
 8001ce8:	2307      	movs	r3, #7
 8001cea:	e00c      	b.n	8001d06 <LL_TIM_IC_SetFilter+0x72>
 8001cec:	2306      	movs	r3, #6
 8001cee:	e00a      	b.n	8001d06 <LL_TIM_IC_SetFilter+0x72>
 8001cf0:	2305      	movs	r3, #5
 8001cf2:	e008      	b.n	8001d06 <LL_TIM_IC_SetFilter+0x72>
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	e006      	b.n	8001d06 <LL_TIM_IC_SetFilter+0x72>
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e004      	b.n	8001d06 <LL_TIM_IC_SetFilter+0x72>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e002      	b.n	8001d06 <LL_TIM_IC_SetFilter+0x72>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <LL_TIM_IC_SetFilter+0x72>
 8001d04:	2300      	movs	r3, #0
 8001d06:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3318      	adds	r3, #24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <LL_TIM_IC_SetFilter+0xb8>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	440b      	add	r3, r1
 8001d16:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	490c      	ldr	r1, [pc, #48]	; (8001d50 <LL_TIM_IC_SetFilter+0xbc>)
 8001d20:	5ccb      	ldrb	r3, [r1, r3]
 8001d22:	4619      	mov	r1, r3
 8001d24:	23f0      	movs	r3, #240	; 0xf0
 8001d26:	408b      	lsls	r3, r1
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	7df9      	ldrb	r1, [r7, #23]
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <LL_TIM_IC_SetFilter+0xbc>)
 8001d34:	5c41      	ldrb	r1, [r0, r1]
 8001d36:	408b      	lsls	r3, r1
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	08006a68 	.word	0x08006a68
 8001d50:	08006a80 	.word	0x08006a80

08001d54 <LL_TIM_IC_SetPolarity>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d02e      	beq.n	8001dc4 <LL_TIM_IC_SetPolarity+0x70>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d029      	beq.n	8001dc0 <LL_TIM_IC_SetPolarity+0x6c>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d024      	beq.n	8001dbc <LL_TIM_IC_SetPolarity+0x68>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d01f      	beq.n	8001db8 <LL_TIM_IC_SetPolarity+0x64>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d7e:	d019      	beq.n	8001db4 <LL_TIM_IC_SetPolarity+0x60>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d86:	d013      	beq.n	8001db0 <LL_TIM_IC_SetPolarity+0x5c>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d8e:	d00d      	beq.n	8001dac <LL_TIM_IC_SetPolarity+0x58>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d96:	d007      	beq.n	8001da8 <LL_TIM_IC_SetPolarity+0x54>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9e:	d101      	bne.n	8001da4 <LL_TIM_IC_SetPolarity+0x50>
 8001da0:	2308      	movs	r3, #8
 8001da2:	e010      	b.n	8001dc6 <LL_TIM_IC_SetPolarity+0x72>
 8001da4:	2309      	movs	r3, #9
 8001da6:	e00e      	b.n	8001dc6 <LL_TIM_IC_SetPolarity+0x72>
 8001da8:	2307      	movs	r3, #7
 8001daa:	e00c      	b.n	8001dc6 <LL_TIM_IC_SetPolarity+0x72>
 8001dac:	2306      	movs	r3, #6
 8001dae:	e00a      	b.n	8001dc6 <LL_TIM_IC_SetPolarity+0x72>
 8001db0:	2305      	movs	r3, #5
 8001db2:	e008      	b.n	8001dc6 <LL_TIM_IC_SetPolarity+0x72>
 8001db4:	2304      	movs	r3, #4
 8001db6:	e006      	b.n	8001dc6 <LL_TIM_IC_SetPolarity+0x72>
 8001db8:	2303      	movs	r3, #3
 8001dba:	e004      	b.n	8001dc6 <LL_TIM_IC_SetPolarity+0x72>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e002      	b.n	8001dc6 <LL_TIM_IC_SetPolarity+0x72>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <LL_TIM_IC_SetPolarity+0x72>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a1a      	ldr	r2, [r3, #32]
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	490b      	ldr	r1, [pc, #44]	; (8001dfc <LL_TIM_IC_SetPolarity+0xa8>)
 8001dd0:	5ccb      	ldrb	r3, [r1, r3]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	230a      	movs	r3, #10
 8001dd6:	408b      	lsls	r3, r1
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	401a      	ands	r2, r3
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	4907      	ldr	r1, [pc, #28]	; (8001dfc <LL_TIM_IC_SetPolarity+0xa8>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	4619      	mov	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	408b      	lsls	r3, r1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	621a      	str	r2, [r3, #32]
}
 8001dee:	bf00      	nop
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	08006a8c 	.word	0x08006a8c

08001e00 <LL_TIM_SetClockSource>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001e12:	f023 0307 	bic.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_TIM_SetTriggerOutput>:
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	605a      	str	r2, [r3, #4]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_TIM_SetTriggerOutput2>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	605a      	str	r2, [r3, #4]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_TIM_EnableMasterSlaveMode>:
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_TIM_DisableMasterSlaveMode>:
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	609a      	str	r2, [r3, #8]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_TIM_SetBreakInputSourcePolarity>:
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b08d      	sub	sp, #52	; 0x34
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->AF1) + BreakInput));
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3360      	adds	r3, #96	; 0x60
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*pReg, (TIMx_AF1_BKINP << TIM_POSITION_BRK_SOURCE), (Polarity << TIM_POSITION_BRK_SOURCE));
 8001ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  return result;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <LL_TIM_SetBreakInputSourcePolarity+0x38>
    return 32U;
 8001eee:	2320      	movs	r3, #32
 8001ef0:	e003      	b.n	8001efa <LL_TIM_SetBreakInputSourcePolarity+0x40>
  return __builtin_clz(value);
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	401a      	ands	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	623b      	str	r3, [r7, #32]
  return result;
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (value == 0U)
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <LL_TIM_SetBreakInputSourcePolarity+0x6a>
    return 32U;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e003      	b.n	8001f2c <LL_TIM_SetBreakInputSourcePolarity+0x72>
  return __builtin_clz(value);
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	6839      	ldr	r1, [r7, #0]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	431a      	orrs	r2, r3
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	601a      	str	r2, [r3, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	3734      	adds	r7, #52	; 0x34
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_TIM_EnableDeadTimePreload>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DTR2, TIM_DTR2_DTPE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b0a0      	sub	sp, #128	; 0x80
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001f6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001f7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f82:	2220      	movs	r2, #32
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f004 fd4e 	bl	8006a28 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	2230      	movs	r2, #48	; 0x30
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 fd47 	bl	8006a28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
 8001fa8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001faa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fae:	f7ff fccb 	bl	8001948 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001fb2:	f7ff fc0f 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fc5f 	bl	8001880 <NVIC_EncodePriority>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	2018      	movs	r0, #24
 8001fc8:	f7ff fc30 	bl	800182c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001fcc:	2018      	movs	r0, #24
 8001fce:	f7ff fc0f 	bl	80017f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP_DOWN;
 8001fd8:	2360      	movs	r3, #96	; 0x60
 8001fda:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 3749;
 8001fdc:	f640 63a5 	movw	r3, #3749	; 0xea5
 8001fe0:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001fea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	488d      	ldr	r0, [pc, #564]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8001ff2:	f003 ff87 	bl	8005f04 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8001ff6:	488c      	ldr	r0, [pc, #560]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8001ff8:	f7ff fcbe 	bl	8001978 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	488a      	ldr	r0, [pc, #552]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8002000:	f7ff fefe 	bl	8001e00 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002004:	2101      	movs	r1, #1
 8002006:	4888      	ldr	r0, [pc, #544]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8002008:	f7ff fd2e 	bl	8001a68 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800200c:	2360      	movs	r3, #96	; 0x60
 800200e:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800201c:	2300      	movs	r3, #0
 800201e:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002020:	2300      	movs	r3, #0
 8002022:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800202c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002030:	461a      	mov	r2, r3
 8002032:	2101      	movs	r1, #1
 8002034:	487c      	ldr	r0, [pc, #496]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8002036:	f003 ffef 	bl	8006018 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 800203a:	2101      	movs	r1, #1
 800203c:	487a      	ldr	r0, [pc, #488]	; (8002228 <MX_TIM1_Init+0x2c0>)
 800203e:	f7ff fcbb 	bl	80019b8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8002042:	2110      	movs	r1, #16
 8002044:	4878      	ldr	r0, [pc, #480]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8002046:	f7ff fd0f 	bl	8001a68 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800204a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800204e:	461a      	mov	r2, r3
 8002050:	2110      	movs	r1, #16
 8002052:	4875      	ldr	r0, [pc, #468]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8002054:	f003 ffe0 	bl	8006018 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8002058:	2110      	movs	r1, #16
 800205a:	4873      	ldr	r0, [pc, #460]	; (8002228 <MX_TIM1_Init+0x2c0>)
 800205c:	f7ff fcac 	bl	80019b8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002064:	4870      	ldr	r0, [pc, #448]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8002066:	f7ff fcff 	bl	8001a68 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800206a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800206e:	461a      	mov	r2, r3
 8002070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002074:	486c      	ldr	r0, [pc, #432]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8002076:	f003 ffcf 	bl	8006018 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 800207a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207e:	486a      	ldr	r0, [pc, #424]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8002080:	f7ff fc9a 	bl	80019b8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8002084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002088:	4867      	ldr	r0, [pc, #412]	; (8002228 <MX_TIM1_Init+0x2c0>)
 800208a:	f7ff fced 	bl	8001a68 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800208e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002092:	461a      	mov	r2, r3
 8002094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002098:	4863      	ldr	r0, [pc, #396]	; (8002228 <MX_TIM1_Init+0x2c0>)
 800209a:	f003 ffbd 	bl	8006018 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 800209e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a2:	4861      	ldr	r0, [pc, #388]	; (8002228 <MX_TIM1_Init+0x2c0>)
 80020a4:	f7ff fc88 	bl	80019b8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
 80020a8:	2170      	movs	r1, #112	; 0x70
 80020aa:	485f      	ldr	r0, [pc, #380]	; (8002228 <MX_TIM1_Init+0x2c0>)
 80020ac:	f7ff febd 	bl	8001e2a <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 80020b0:	2100      	movs	r1, #0
 80020b2:	485d      	ldr	r0, [pc, #372]	; (8002228 <MX_TIM1_Init+0x2c0>)
 80020b4:	f7ff fece 	bl	8001e54 <LL_TIM_SetTriggerOutput2>
  LL_TIM_EnableMasterSlaveMode(TIM1);
 80020b8:	485b      	ldr	r0, [pc, #364]	; (8002228 <MX_TIM1_Init+0x2c0>)
 80020ba:	f7ff fede 	bl	8001e7a <LL_TIM_EnableMasterSlaveMode>
  LL_TIM_SetBreakInputSourcePolarity(TIM1, LL_TIM_BREAK_INPUT_BKIN2, LL_TIM_BKIN_SOURCE_BKCOMP1, LL_TIM_BKIN_POLARITY_HIGH);
 80020be:	2300      	movs	r3, #0
 80020c0:	2202      	movs	r2, #2
 80020c2:	2104      	movs	r1, #4
 80020c4:	4858      	ldr	r0, [pc, #352]	; (8002228 <MX_TIM1_Init+0x2c0>)
 80020c6:	f7ff fef8 	bl	8001eba <LL_TIM_SetBreakInputSourcePolarity>
  LL_TIM_SetBreakInputSourcePolarity(TIM1, LL_TIM_BREAK_INPUT_BKIN2, LL_TIM_BKIN_SOURCE_BKCOMP2, LL_TIM_BKIN_POLARITY_HIGH);
 80020ca:	2300      	movs	r3, #0
 80020cc:	2204      	movs	r2, #4
 80020ce:	2104      	movs	r1, #4
 80020d0:	4855      	ldr	r0, [pc, #340]	; (8002228 <MX_TIM1_Init+0x2c0>)
 80020d2:	f7ff fef2 	bl	8001eba <LL_TIM_SetBreakInputSourcePolarity>
  LL_TIM_SetBreakInputSourcePolarity(TIM1, LL_TIM_BREAK_INPUT_BKIN2, LL_TIM_BKIN_SOURCE_BKCOMP3, LL_TIM_BKIN_POLARITY_HIGH);
 80020d6:	2300      	movs	r3, #0
 80020d8:	2208      	movs	r2, #8
 80020da:	2104      	movs	r1, #4
 80020dc:	4852      	ldr	r0, [pc, #328]	; (8002228 <MX_TIM1_Init+0x2c0>)
 80020de:	f7ff feec 	bl	8001eba <LL_TIM_SetBreakInputSourcePolarity>
  LL_TIM_EnableDeadTimePreload(TIM1);
 80020e2:	4851      	ldr	r0, [pc, #324]	; (8002228 <MX_TIM1_Init+0x2c0>)
 80020e4:	f7ff ff30 	bl	8001f48 <LL_TIM_EnableDeadTimePreload>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 80020e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020ec:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 80020ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f2:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 60;
 80020f8:	233c      	movs	r3, #60	; 0x3c
 80020fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 800210c:	2300      	movs	r3, #0
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_ENABLE;
 8002110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002114:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8002116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 800211c:	2300      	movs	r3, #0
 800211e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8002120:	2300      	movs	r3, #0
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	483e      	ldr	r0, [pc, #248]	; (8002228 <MX_TIM1_Init+0x2c0>)
 8002130:	f003 ffd2 	bl	80060d8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002134:	2002      	movs	r0, #2
 8002136:	f7ff fbd7 	bl	80018e8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800213a:	2001      	movs	r0, #1
 800213c:	f7ff fbd4 	bl	80018e8 <LL_AHB2_GRP1_EnableClock>
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
  GPIO_InitStruct.Pin = PHASE_U_LS_Pin;
 8002140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002144:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002146:	2302      	movs	r3, #2
 8002148:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002156:	2306      	movs	r3, #6
 8002158:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PHASE_U_LS_GPIO_Port, &GPIO_InitStruct);
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	4619      	mov	r1, r3
 800215e:	4833      	ldr	r0, [pc, #204]	; (800222c <MX_TIM1_Init+0x2c4>)
 8002160:	f003 fb62 	bl	8005828 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PHASE_V_LS_Pin;
 8002164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002168:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800216a:	2302      	movs	r3, #2
 800216c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800217a:	2306      	movs	r3, #6
 800217c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PHASE_V_LS_GPIO_Port, &GPIO_InitStruct);
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	4619      	mov	r1, r3
 8002182:	482a      	ldr	r0, [pc, #168]	; (800222c <MX_TIM1_Init+0x2c4>)
 8002184:	f003 fb50 	bl	8005828 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PHASE_W_LS_Pin;
 8002188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800218c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800218e:	2302      	movs	r3, #2
 8002190:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800219e:	2304      	movs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PHASE_W_LS_GPIO_Port, &GPIO_InitStruct);
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4821      	ldr	r0, [pc, #132]	; (800222c <MX_TIM1_Init+0x2c4>)
 80021a8:	f003 fb3e 	bl	8005828 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PHASE_U_HS_Pin;
 80021ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021b2:	2302      	movs	r3, #2
 80021b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80021c2:	2306      	movs	r3, #6
 80021c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PHASE_U_HS_GPIO_Port, &GPIO_InitStruct);
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ce:	f003 fb2b 	bl	8005828 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PHASE_V_HS_Pin;
 80021d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021d8:	2302      	movs	r3, #2
 80021da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80021e8:	2306      	movs	r3, #6
 80021ea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PHASE_V_HS_GPIO_Port, &GPIO_InitStruct);
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f4:	f003 fb18 	bl	8005828 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PHASE_W_HS_Pin;
 80021f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021fe:	2302      	movs	r3, #2
 8002200:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800220e:	2306      	movs	r3, #6
 8002210:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PHASE_W_HS_GPIO_Port, &GPIO_InitStruct);
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221a:	f003 fb05 	bl	8005828 <LL_GPIO_Init>

}
 800221e:	bf00      	nop
 8002220:	3780      	adds	r7, #128	; 0x80
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40012c00 	.word	0x40012c00
 800222c:	48000400 	.word	0x48000400

08002230 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff fb67 	bl	8001918 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800224a:	f7ff fac3 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 800224e:	4603      	mov	r3, r0
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fb13 	bl	8001880 <NVIC_EncodePriority>
 800225a:	4603      	mov	r3, r0
 800225c:	4619      	mov	r1, r3
 800225e:	201c      	movs	r0, #28
 8002260:	f7ff fae4 	bl	800182c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002264:	201c      	movs	r0, #28
 8002266:	f7ff fac3 	bl	80017f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1023;
 800226a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800226e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4.294967295E9;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	4619      	mov	r1, r3
 8002282:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002286:	f003 fe3d 	bl	8005f04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800228a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800228e:	f7ff fb83 	bl	8001998 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002292:	2100      	movs	r1, #0
 8002294:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002298:	f7ff fdb2 	bl	8001e00 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800229c:	2100      	movs	r1, #0
 800229e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022a2:	f7ff fdc2 	bl	8001e2a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80022a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022aa:	f7ff fdf6 	bl	8001e9a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80022cc:	2002      	movs	r0, #2
 80022ce:	f7ff fb23 	bl	8001918 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022d2:	f7ff fa7f 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff facf 	bl	8001880 <NVIC_EncodePriority>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4619      	mov	r1, r3
 80022e6:	201d      	movs	r0, #29
 80022e8:	f7ff faa0 	bl	800182c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80022ec:	201d      	movs	r0, #29
 80022ee:	f7ff fa7f 	bl	80017f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1499;
 80022f2:	f240 53db 	movw	r3, #1499	; 0x5db
 80022f6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10000;
 80022fc:	f242 7310 	movw	r3, #10000	; 0x2710
 8002300:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	4619      	mov	r1, r3
 800230a:	480a      	ldr	r0, [pc, #40]	; (8002334 <MX_TIM3_Init+0x7c>)
 800230c:	f003 fdfa 	bl	8005f04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002310:	4808      	ldr	r0, [pc, #32]	; (8002334 <MX_TIM3_Init+0x7c>)
 8002312:	f7ff fb41 	bl	8001998 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002316:	2100      	movs	r1, #0
 8002318:	4806      	ldr	r0, [pc, #24]	; (8002334 <MX_TIM3_Init+0x7c>)
 800231a:	f7ff fd71 	bl	8001e00 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800231e:	2100      	movs	r1, #0
 8002320:	4804      	ldr	r0, [pc, #16]	; (8002334 <MX_TIM3_Init+0x7c>)
 8002322:	f7ff fd82 	bl	8001e2a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002326:	4803      	ldr	r0, [pc, #12]	; (8002334 <MX_TIM3_Init+0x7c>)
 8002328:	f7ff fdb7 	bl	8001e9a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40000400 	.word	0x40000400

08002338 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08c      	sub	sp, #48	; 0x30
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
 800235c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800235e:	2004      	movs	r0, #4
 8002360:	f7ff fada 	bl	8001918 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002364:	2002      	movs	r0, #2
 8002366:	f7ff fabf 	bl	80018e8 <LL_AHB2_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  PB9   ------> TIM4_CH4
  */
  GPIO_InitStruct.Pin = HALL_A_Pin;
 800236a:	2340      	movs	r3, #64	; 0x40
 800236c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800236e:	2302      	movs	r3, #2
 8002370:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(HALL_A_GPIO_Port, &GPIO_InitStruct);
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	4619      	mov	r1, r3
 8002386:	484b      	ldr	r0, [pc, #300]	; (80024b4 <MX_TIM4_Init+0x17c>)
 8002388:	f003 fa4e 	bl	8005828 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = HALL_B_Pin;
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002390:	2302      	movs	r3, #2
 8002392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(HALL_B_GPIO_Port, &GPIO_InitStruct);
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4842      	ldr	r0, [pc, #264]	; (80024b4 <MX_TIM4_Init+0x17c>)
 80023aa:	f003 fa3d 	bl	8005828 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = HALL_C_Pin;
 80023ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023b4:	2302      	movs	r3, #2
 80023b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80023c4:	2302      	movs	r3, #2
 80023c6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(HALL_C_GPIO_Port, &GPIO_InitStruct);
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4839      	ldr	r0, [pc, #228]	; (80024b4 <MX_TIM4_Init+0x17c>)
 80023ce:	f003 fa2b 	bl	8005828 <LL_GPIO_Init>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80023d2:	f7ff f9ff 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fa4f 	bl	8001880 <NVIC_EncodePriority>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4619      	mov	r1, r3
 80023e6:	201e      	movs	r0, #30
 80023e8:	f7ff fa20 	bl	800182c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 80023ec:	201e      	movs	r0, #30
 80023ee:	f7ff f9ff 	bl	80017f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 80023fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002400:	2300      	movs	r3, #0
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	482b      	ldr	r0, [pc, #172]	; (80024b8 <MX_TIM4_Init+0x180>)
 800240c:	f003 fd7a 	bl	8005f04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002410:	4829      	ldr	r0, [pc, #164]	; (80024b8 <MX_TIM4_Init+0x180>)
 8002412:	f7ff fac1 	bl	8001998 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002416:	2100      	movs	r1, #0
 8002418:	4827      	ldr	r0, [pc, #156]	; (80024b8 <MX_TIM4_Init+0x180>)
 800241a:	f7ff fd06 	bl	8001e2a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 800241e:	4826      	ldr	r0, [pc, #152]	; (80024b8 <MX_TIM4_Init+0x180>)
 8002420:	f7ff fd3b 	bl	8001e9a <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002424:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002428:	2101      	movs	r1, #1
 800242a:	4823      	ldr	r0, [pc, #140]	; (80024b8 <MX_TIM4_Init+0x180>)
 800242c:	f7ff fb72 	bl	8001b14 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002430:	2200      	movs	r2, #0
 8002432:	2101      	movs	r1, #1
 8002434:	4820      	ldr	r0, [pc, #128]	; (80024b8 <MX_TIM4_Init+0x180>)
 8002436:	f7ff fbcd 	bl	8001bd4 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800243a:	2200      	movs	r2, #0
 800243c:	2101      	movs	r1, #1
 800243e:	481e      	ldr	r0, [pc, #120]	; (80024b8 <MX_TIM4_Init+0x180>)
 8002440:	f7ff fc28 	bl	8001c94 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_BOTHEDGE);
 8002444:	220a      	movs	r2, #10
 8002446:	2101      	movs	r1, #1
 8002448:	481b      	ldr	r0, [pc, #108]	; (80024b8 <MX_TIM4_Init+0x180>)
 800244a:	f7ff fc83 	bl	8001d54 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800244e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002452:	2110      	movs	r1, #16
 8002454:	4818      	ldr	r0, [pc, #96]	; (80024b8 <MX_TIM4_Init+0x180>)
 8002456:	f7ff fb5d 	bl	8001b14 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800245a:	2200      	movs	r2, #0
 800245c:	2110      	movs	r1, #16
 800245e:	4816      	ldr	r0, [pc, #88]	; (80024b8 <MX_TIM4_Init+0x180>)
 8002460:	f7ff fbb8 	bl	8001bd4 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002464:	2200      	movs	r2, #0
 8002466:	2110      	movs	r1, #16
 8002468:	4813      	ldr	r0, [pc, #76]	; (80024b8 <MX_TIM4_Init+0x180>)
 800246a:	f7ff fc13 	bl	8001c94 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_BOTHEDGE);
 800246e:	220a      	movs	r2, #10
 8002470:	2110      	movs	r1, #16
 8002472:	4811      	ldr	r0, [pc, #68]	; (80024b8 <MX_TIM4_Init+0x180>)
 8002474:	f7ff fc6e 	bl	8001d54 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002478:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800247c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002480:	480d      	ldr	r0, [pc, #52]	; (80024b8 <MX_TIM4_Init+0x180>)
 8002482:	f7ff fb47 	bl	8001b14 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_ICPSC_DIV1);
 8002486:	2200      	movs	r2, #0
 8002488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800248c:	480a      	ldr	r0, [pc, #40]	; (80024b8 <MX_TIM4_Init+0x180>)
 800248e:	f7ff fba1 	bl	8001bd4 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_IC_FILTER_FDIV1);
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002498:	4807      	ldr	r0, [pc, #28]	; (80024b8 <MX_TIM4_Init+0x180>)
 800249a:	f7ff fbfb 	bl	8001c94 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_IC_POLARITY_BOTHEDGE);
 800249e:	220a      	movs	r2, #10
 80024a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a4:	4804      	ldr	r0, [pc, #16]	; (80024b8 <MX_TIM4_Init+0x180>)
 80024a6:	f7ff fc55 	bl	8001d54 <LL_TIM_IC_SetPolarity>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	48000400 	.word	0x48000400
 80024b8:	40000800 	.word	0x40000800

080024bc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 80024d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024d4:	f7ff fa38 	bl	8001948 <LL_APB2_GRP1_EnableClock>

  /* TIM8 interrupt Init */
  NVIC_SetPriority(TIM8_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024d8:	f7ff f97c 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 80024dc:	4603      	mov	r3, r0
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f9cc 	bl	8001880 <NVIC_EncodePriority>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4619      	mov	r1, r3
 80024ec:	202c      	movs	r0, #44	; 0x2c
 80024ee:	f7ff f99d 	bl	800182c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_IRQn);
 80024f2:	202c      	movs	r0, #44	; 0x2c
 80024f4:	f7ff f97c 	bl	80017f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 150;
 80024f8:	2396      	movs	r3, #150	; 0x96
 80024fa:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000;
 8002500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002504:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	4619      	mov	r1, r3
 8002512:	480c      	ldr	r0, [pc, #48]	; (8002544 <MX_TIM8_Init+0x88>)
 8002514:	f003 fcf6 	bl	8005f04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8002518:	480a      	ldr	r0, [pc, #40]	; (8002544 <MX_TIM8_Init+0x88>)
 800251a:	f7ff fa3d 	bl	8001998 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM8, LL_TIM_CLOCKSOURCE_INTERNAL);
 800251e:	2100      	movs	r1, #0
 8002520:	4808      	ldr	r0, [pc, #32]	; (8002544 <MX_TIM8_Init+0x88>)
 8002522:	f7ff fc6d 	bl	8001e00 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8002526:	2100      	movs	r1, #0
 8002528:	4806      	ldr	r0, [pc, #24]	; (8002544 <MX_TIM8_Init+0x88>)
 800252a:	f7ff fc7e 	bl	8001e2a <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 800252e:	2100      	movs	r1, #0
 8002530:	4804      	ldr	r0, [pc, #16]	; (8002544 <MX_TIM8_Init+0x88>)
 8002532:	f7ff fc8f 	bl	8001e54 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8002536:	4803      	ldr	r0, [pc, #12]	; (8002544 <MX_TIM8_Init+0x88>)
 8002538:	f7ff fcaf 	bl	8001e9a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40013400 	.word	0x40013400

08002548 <LL_RCC_SetUSARTClockSource>:
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <LL_RCC_SetUSARTClockSource+0x30>)
 8002552:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	43db      	mvns	r3, r3
 800255c:	401a      	ands	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4905      	ldr	r1, [pc, #20]	; (8002578 <LL_RCC_SetUSARTClockSource+0x30>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000

0800257c <LL_AHB2_GRP1_EnableClock>:
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002588:	4907      	ldr	r1, [pc, #28]	; (80025a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4313      	orrs	r3, r2
 800258e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4013      	ands	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40021000 	.word	0x40021000

080025ac <LL_APB1_GRP1_EnableClock>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025b8:	4907      	ldr	r1, [pc, #28]	; (80025d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4313      	orrs	r3, r2
 80025be:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40021000 	.word	0x40021000

080025dc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3308      	adds	r3, #8
 800262a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	e853 3f00 	ldrex	r3, [r3]
 8002632:	60bb      	str	r3, [r7, #8]
   return(result);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	075b      	lsls	r3, r3, #29
 800263e:	4313      	orrs	r3, r2
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3308      	adds	r3, #8
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	61ba      	str	r2, [r7, #24]
 800264a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264c:	6979      	ldr	r1, [r7, #20]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	e841 2300 	strex	r3, r2, [r1]
 8002654:	613b      	str	r3, [r7, #16]
   return(result);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e4      	bne.n	8002626 <LL_USART_SetTXFIFOThreshold+0xa>
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800266a:	b480      	push	{r7}
 800266c:	b089      	sub	sp, #36	; 0x24
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3308      	adds	r3, #8
 8002678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	60bb      	str	r3, [r7, #8]
   return(result);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	065b      	lsls	r3, r3, #25
 800268c:	4313      	orrs	r3, r2
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3308      	adds	r3, #8
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	61ba      	str	r2, [r7, #24]
 8002698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	6979      	ldr	r1, [r7, #20]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	613b      	str	r3, [r7, #16]
   return(result);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e4      	bne.n	8002674 <LL_USART_SetRXFIFOThreshold+0xa>
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	3724      	adds	r7, #36	; 0x24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026f8:	d101      	bne.n	80026fe <LL_USART_IsActiveFlag_TEACK+0x1a>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002720:	d101      	bne.n	8002726 <LL_USART_IsActiveFlag_REACK+0x1a>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <LL_USART_IsActiveFlag_REACK+0x1c>
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08e      	sub	sp, #56	; 0x38
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800273a:	f107 0318 	add.w	r3, r7, #24
 800273e:	2220      	movs	r2, #32
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f004 f970 	bl	8006a28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	463b      	mov	r3, r7
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	60da      	str	r2, [r3, #12]
 8002754:	611a      	str	r2, [r3, #16]
 8002756:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 8002758:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800275c:	f7ff fef4 	bl	8002548 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8002760:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002764:	f7ff ff22 	bl	80025ac <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002768:	2002      	movs	r0, #2
 800276a:	f7ff ff07 	bl	800257c <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = TX_Pin;
 800276e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002772:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002774:	2302      	movs	r3, #2
 8002776:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002784:	2307      	movs	r3, #7
 8002786:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002788:	463b      	mov	r3, r7
 800278a:	4619      	mov	r1, r3
 800278c:	4827      	ldr	r0, [pc, #156]	; (800282c <MX_USART3_UART_Init+0xf8>)
 800278e:	f003 f84b 	bl	8005828 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = RX_Pin;
 8002792:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002796:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002798:	2302      	movs	r3, #2
 800279a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80027a8:	2307      	movs	r3, #7
 80027aa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80027ac:	463b      	mov	r3, r7
 80027ae:	4619      	mov	r1, r3
 80027b0:	481e      	ldr	r0, [pc, #120]	; (800282c <MX_USART3_UART_Init+0xf8>)
 80027b2:	f003 f839 	bl	8005828 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 80027ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80027be:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80027cc:	230c      	movs	r3, #12
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80027d4:	2300      	movs	r3, #0
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80027d8:	f107 0318 	add.w	r3, r7, #24
 80027dc:	4619      	mov	r1, r3
 80027de:	4814      	ldr	r0, [pc, #80]	; (8002830 <MX_USART3_UART_Init+0xfc>)
 80027e0:	f004 f874 	bl	80068cc <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 80027e4:	2100      	movs	r1, #0
 80027e6:	4812      	ldr	r0, [pc, #72]	; (8002830 <MX_USART3_UART_Init+0xfc>)
 80027e8:	f7ff ff18 	bl	800261c <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 80027ec:	2100      	movs	r1, #0
 80027ee:	4810      	ldr	r0, [pc, #64]	; (8002830 <MX_USART3_UART_Init+0xfc>)
 80027f0:	f7ff ff3b 	bl	800266a <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 80027f4:	480e      	ldr	r0, [pc, #56]	; (8002830 <MX_USART3_UART_Init+0xfc>)
 80027f6:	f7ff ff01 	bl	80025fc <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART3);
 80027fa:	480d      	ldr	r0, [pc, #52]	; (8002830 <MX_USART3_UART_Init+0xfc>)
 80027fc:	f7ff ff5c 	bl	80026b8 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART3 */

  /* USER CODE END WKUPType USART3 */

  LL_USART_Enable(USART3);
 8002800:	480b      	ldr	r0, [pc, #44]	; (8002830 <MX_USART3_UART_Init+0xfc>)
 8002802:	f7ff feeb 	bl	80025dc <LL_USART_Enable>

  /* Polling USART3 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 8002806:	bf00      	nop
 8002808:	4809      	ldr	r0, [pc, #36]	; (8002830 <MX_USART3_UART_Init+0xfc>)
 800280a:	f7ff ff6b 	bl	80026e4 <LL_USART_IsActiveFlag_TEACK>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f9      	beq.n	8002808 <MX_USART3_UART_Init+0xd4>
 8002814:	4806      	ldr	r0, [pc, #24]	; (8002830 <MX_USART3_UART_Init+0xfc>)
 8002816:	f7ff ff79 	bl	800270c <LL_USART_IsActiveFlag_REACK>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f3      	beq.n	8002808 <MX_USART3_UART_Init+0xd4>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3738      	adds	r7, #56	; 0x38
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	48000400 	.word	0x48000400
 8002830:	40004800 	.word	0x40004800

08002834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002834:	480d      	ldr	r0, [pc, #52]	; (800286c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002836:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <LoopForever+0x6>)
  ldr r1, =_edata
 800283a:	490e      	ldr	r1, [pc, #56]	; (8002874 <LoopForever+0xa>)
  ldr r2, =_sidata
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <LoopForever+0xe>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002840:	e002      	b.n	8002848 <LoopCopyDataInit>

08002842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002846:	3304      	adds	r3, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800284c:	d3f9      	bcc.n	8002842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002850:	4c0b      	ldr	r4, [pc, #44]	; (8002880 <LoopForever+0x16>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002854:	e001      	b.n	800285a <LoopFillZerobss>

08002856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002858:	3204      	adds	r2, #4

0800285a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800285c:	d3fb      	bcc.n	8002856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800285e:	f7fe ffa7 	bl	80017b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002862:	f004 f8bd 	bl	80069e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002866:	f7fe fdd9 	bl	800141c <main>

0800286a <LoopForever>:

LoopForever:
    b LoopForever
 800286a:	e7fe      	b.n	800286a <LoopForever>
  ldr   r0, =_estack
 800286c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002878:	08006ad0 	.word	0x08006ad0
  ldr r2, =_sbss
 800287c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002880:	200001f0 	.word	0x200001f0

08002884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC1_2_IRQHandler>

08002886 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002890:	2003      	movs	r0, #3
 8002892:	f001 fb8b 	bl	8003fac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002896:	200f      	movs	r0, #15
 8002898:	f000 f80e 	bl	80028b8 <HAL_InitTick>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	71fb      	strb	r3, [r7, #7]
 80028a6:	e001      	b.n	80028ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028a8:	f7fe ff1c 	bl	80016e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ac:	79fb      	ldrb	r3, [r7, #7]

}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <HAL_InitTick+0x68>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d022      	beq.n	8002912 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_InitTick+0x6c>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <HAL_InitTick+0x68>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 fb96 	bl	8004012 <HAL_SYSTICK_Config>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10f      	bne.n	800290c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	d809      	bhi.n	8002906 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f2:	2200      	movs	r2, #0
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	f04f 30ff 	mov.w	r0, #4294967295
 80028fa:	f001 fb62 	bl	8003fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_InitTick+0x70>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e007      	b.n	8002916 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	e004      	b.n	8002916 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	e001      	b.n	8002916 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000008 	.word	0x20000008
 8002924:	20000000 	.word	0x20000000
 8002928:	20000004 	.word	0x20000004

0800292c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_IncTick+0x1c>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_IncTick+0x20>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4413      	add	r3, r2
 800293a:	4a03      	ldr	r2, [pc, #12]	; (8002948 <HAL_IncTick+0x1c>)
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	200001ec 	.word	0x200001ec
 800294c:	20000008 	.word	0x20000008

08002950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return uwTick;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_GetTick+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	200001ec 	.word	0x200001ec

08002968 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0202 	bic.w	r2, r3, #2
 8002978:	4904      	ldr	r1, [pc, #16]	; (800298c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40010030 	.word	0x40010030

08002990 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40010030 	.word	0x40010030

080029b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3360      	adds	r3, #96	; 0x60
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <LL_ADC_SetOffset+0x44>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	03fff000 	.word	0x03fff000

08002a60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3360      	adds	r3, #96	; 0x60
 8002a6e:	461a      	mov	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3360      	adds	r3, #96	; 0x60
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b087      	sub	sp, #28
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3360      	adds	r3, #96	; 0x60
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3360      	adds	r3, #96	; 0x60
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	615a      	str	r2, [r3, #20]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b087      	sub	sp, #28
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3330      	adds	r3, #48	; 0x30
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	4413      	add	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	211f      	movs	r1, #31
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	401a      	ands	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	f003 011f 	and.w	r1, r3, #31
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bc6:	bf00      	nop
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b087      	sub	sp, #28
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3314      	adds	r3, #20
 8002be2:	461a      	mov	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	0e5b      	lsrs	r3, r3, #25
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	4413      	add	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	0d1b      	lsrs	r3, r3, #20
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2107      	movs	r1, #7
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	401a      	ands	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	0d1b      	lsrs	r3, r3, #20
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	431a      	orrs	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c1c:	bf00      	nop
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10a      	bne.n	8002c52 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002c50:	e00a      	b.n	8002c68 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	401a      	ands	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	407f0000 	.word	0x407f0000

08002c78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 031f 	and.w	r3, r3, #31
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6093      	str	r3, [r2, #8]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ccc:	d101      	bne.n	8002cd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d1c:	d101      	bne.n	8002d22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_IsEnabled+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_IsEnabled+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d92:	f043 0204 	orr.w	r2, r3, #4
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d101      	bne.n	8002dbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d101      	bne.n	8002de4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e177      	b.n	80030fe <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7fd fb61 	bl	80004e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff3f 	bl	8002cb8 <LL_ADC_IsDeepPowerDownEnabled>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff25 	bl	8002c94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff5a 	bl	8002d08 <LL_ADC_IsInternalRegulatorEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d115      	bne.n	8002e86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff3e 	bl	8002ce0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e64:	4b9c      	ldr	r3, [pc, #624]	; (80030d8 <HAL_ADC_Init+0x2e4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	4a9c      	ldr	r2, [pc, #624]	; (80030dc <HAL_ADC_Init+0x2e8>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	3301      	adds	r3, #1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e78:	e002      	b.n	8002e80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f9      	bne.n	8002e7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff3c 	bl	8002d08 <LL_ADC_IsInternalRegulatorEnabled>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10d      	bne.n	8002eb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ff75 	bl	8002da6 <LL_ADC_REG_IsConversionOngoing>
 8002ebc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 8110 	bne.w	80030ec <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 810c 	bne.w	80030ec <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002edc:	f043 0202 	orr.w	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff35 	bl	8002d58 <LL_ADC_IsEnabled>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d111      	bne.n	8002f18 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ef4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ef8:	f7ff ff2e 	bl	8002d58 <LL_ADC_IsEnabled>
 8002efc:	4604      	mov	r4, r0
 8002efe:	4878      	ldr	r0, [pc, #480]	; (80030e0 <HAL_ADC_Init+0x2ec>)
 8002f00:	f7ff ff2a 	bl	8002d58 <LL_ADC_IsEnabled>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4323      	orrs	r3, r4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4619      	mov	r1, r3
 8002f12:	4874      	ldr	r0, [pc, #464]	; (80030e4 <HAL_ADC_Init+0x2f0>)
 8002f14:	f7ff fd4c 	bl	80029b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7f5b      	ldrb	r3, [r3, #29]
 8002f1c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f22:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f28:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f2e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f36:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d106      	bne.n	8002f54 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	045b      	lsls	r3, r3, #17
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	4b5c      	ldr	r3, [pc, #368]	; (80030e8 <HAL_ADC_Init+0x2f4>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	69b9      	ldr	r1, [r7, #24]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff01 	bl	8002da6 <LL_ADC_REG_IsConversionOngoing>
 8002fa4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff0e 	bl	8002dcc <LL_ADC_INJ_IsConversionOngoing>
 8002fb0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d16d      	bne.n	8003094 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d16a      	bne.n	8003094 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fc2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fca:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fda:	f023 0302 	bic.w	r3, r3, #2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	69b9      	ldr	r1, [r7, #24]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d017      	beq.n	8003020 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ffe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003008:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800300c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6911      	ldr	r1, [r2, #16]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800301e:	e013      	b.n	8003048 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800302e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003044:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800304e:	2b01      	cmp	r3, #1
 8003050:	d118      	bne.n	8003084 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800305c:	f023 0304 	bic.w	r3, r3, #4
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003068:	4311      	orrs	r1, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003074:	430a      	orrs	r2, r1
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	611a      	str	r2, [r3, #16]
 8003082:	e007      	b.n	8003094 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d10c      	bne.n	80030b6 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f023 010f 	bic.w	r1, r3, #15
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	1e5a      	subs	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
 80030b4:	e007      	b.n	80030c6 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 020f 	bic.w	r2, r2, #15
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	f043 0201 	orr.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80030d6:	e011      	b.n	80030fc <HAL_ADC_Init+0x308>
 80030d8:	20000000 	.word	0x20000000
 80030dc:	053e2d63 	.word	0x053e2d63
 80030e0:	50000100 	.word	0x50000100
 80030e4:	50000300 	.word	0x50000300
 80030e8:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	f043 0210 	orr.w	r2, r3, #16
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	; 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd90      	pop	{r4, r7, pc}
 8003106:	bf00      	nop

08003108 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003114:	4851      	ldr	r0, [pc, #324]	; (800325c <HAL_ADC_Start_DMA+0x154>)
 8003116:	f7ff fdaf 	bl	8002c78 <LL_ADC_GetMultimode>
 800311a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe40 	bl	8002da6 <LL_ADC_REG_IsConversionOngoing>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 808f 	bne.w	800324c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_ADC_Start_DMA+0x34>
 8003138:	2302      	movs	r3, #2
 800313a:	e08a      	b.n	8003252 <HAL_ADC_Start_DMA+0x14a>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b05      	cmp	r3, #5
 800314e:	d002      	beq.n	8003156 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b09      	cmp	r3, #9
 8003154:	d173      	bne.n	800323e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fc98 	bl	8003a8c <ADC_Enable>
 800315c:	4603      	mov	r3, r0
 800315e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d166      	bne.n	8003234 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a38      	ldr	r2, [pc, #224]	; (8003260 <HAL_ADC_Start_DMA+0x158>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d002      	beq.n	800318a <HAL_ADC_Start_DMA+0x82>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	e001      	b.n	800318e <HAL_ADC_Start_DMA+0x86>
 800318a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4293      	cmp	r3, r2
 8003194:	d002      	beq.n	800319c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b8:	f023 0206 	bic.w	r2, r3, #6
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	661a      	str	r2, [r3, #96]	; 0x60
 80031c0:	e002      	b.n	80031c8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	4a25      	ldr	r2, [pc, #148]	; (8003264 <HAL_ADC_Start_DMA+0x15c>)
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	4a24      	ldr	r2, [pc, #144]	; (8003268 <HAL_ADC_Start_DMA+0x160>)
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	4a23      	ldr	r2, [pc, #140]	; (800326c <HAL_ADC_Start_DMA+0x164>)
 80031de:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	221c      	movs	r2, #28
 80031e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0210 	orr.w	r2, r2, #16
 80031fe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3340      	adds	r3, #64	; 0x40
 800321a:	4619      	mov	r1, r3
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f000 ffac 	bl	800417c <HAL_DMA_Start_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fda6 	bl	8002d7e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003232:	e00d      	b.n	8003250 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800323c:	e008      	b.n	8003250 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800324a:	e001      	b.n	8003250 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800324c:	2302      	movs	r3, #2
 800324e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003250:	7dfb      	ldrb	r3, [r7, #23]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	50000300 	.word	0x50000300
 8003260:	50000100 	.word	0x50000100
 8003264:	08003b51 	.word	0x08003b51
 8003268:	08003c29 	.word	0x08003c29
 800326c:	08003c45 	.word	0x08003c45

08003270 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b0b6      	sub	sp, #216	; 0xd8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x22>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e3c8      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x7b4>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fd63 	bl	8002da6 <LL_ADC_REG_IsConversionOngoing>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f040 83ad 	bne.w	8003a42 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	f7ff fc40 	bl	8002b7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fd51 	bl	8002da6 <LL_ADC_REG_IsConversionOngoing>
 8003304:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fd5d 	bl	8002dcc <LL_ADC_INJ_IsConversionOngoing>
 8003312:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003316:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800331a:	2b00      	cmp	r3, #0
 800331c:	f040 81d9 	bne.w	80036d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 81d4 	bne.w	80036d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003332:	d10f      	bne.n	8003354 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2200      	movs	r2, #0
 800333e:	4619      	mov	r1, r3
 8003340:	f7ff fc47 	bl	8002bd2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fbee 	bl	8002b2e <LL_ADC_SetSamplingTimeCommonConfig>
 8003352:	e00e      	b.n	8003372 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	461a      	mov	r2, r3
 8003362:	f7ff fc36 	bl	8002bd2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fbde 	bl	8002b2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	08db      	lsrs	r3, r3, #3
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d022      	beq.n	80033da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6919      	ldr	r1, [r3, #16]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033a4:	f7ff fb38 	bl	8002a18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6919      	ldr	r1, [r3, #16]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	461a      	mov	r2, r3
 80033b6:	f7ff fb84 	bl	8002ac2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6919      	ldr	r1, [r3, #16]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	7f1b      	ldrb	r3, [r3, #28]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d102      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x124>
 80033ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ce:	e000      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x126>
 80033d0:	2300      	movs	r3, #0
 80033d2:	461a      	mov	r2, r3
 80033d4:	f7ff fb90 	bl	8002af8 <LL_ADC_SetOffsetSaturation>
 80033d8:	e17b      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fb3d 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x15a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fb32 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	0e9b      	lsrs	r3, r3, #26
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	e01e      	b.n	8003444 <HAL_ADC_ConfigChannel+0x198>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fb27 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 8003412:	4603      	mov	r3, r0
 8003414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800342c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x18c>
    return 32U;
 8003434:	2320      	movs	r3, #32
 8003436:	e004      	b.n	8003442 <HAL_ADC_ConfigChannel+0x196>
  return __builtin_clz(value);
 8003438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <HAL_ADC_ConfigChannel+0x1b0>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	e018      	b.n	800348e <HAL_ADC_ConfigChannel+0x1e2>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003480:	2320      	movs	r3, #32
 8003482:	e004      	b.n	800348e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800348e:	429a      	cmp	r2, r3
 8003490:	d106      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff faf6 	bl	8002a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fada 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x220>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2101      	movs	r1, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff facf 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 80034c2:	4603      	mov	r3, r0
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	f003 021f 	and.w	r2, r3, #31
 80034ca:	e01e      	b.n	800350a <HAL_ADC_ConfigChannel+0x25e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fac4 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 80034d8:	4603      	mov	r3, r0
 80034da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80034ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80034f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80034fa:	2320      	movs	r3, #32
 80034fc:	e004      	b.n	8003508 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80034fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x276>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	0e9b      	lsrs	r3, r3, #26
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	e018      	b.n	8003554 <HAL_ADC_ConfigChannel+0x2a8>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800353a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800353e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e004      	b.n	8003554 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800354a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003554:	429a      	cmp	r2, r3
 8003556:	d106      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2200      	movs	r2, #0
 800355e:	2101      	movs	r1, #1
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fa93 	bl	8002a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2102      	movs	r1, #2
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fa77 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 8003572:	4603      	mov	r3, r0
 8003574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x2e6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2102      	movs	r1, #2
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fa6c 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 8003588:	4603      	mov	r3, r0
 800358a:	0e9b      	lsrs	r3, r3, #26
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	e01e      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x324>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2102      	movs	r1, #2
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fa61 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 800359e:	4603      	mov	r3, r0
 80035a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e004      	b.n	80035ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80035c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x33c>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0e9b      	lsrs	r3, r3, #26
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	e016      	b.n	8003616 <HAL_ADC_ConfigChannel+0x36a>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80035fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003608:	2320      	movs	r3, #32
 800360a:	e004      	b.n	8003616 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800360c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003616:	429a      	cmp	r2, r3
 8003618:	d106      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2200      	movs	r2, #0
 8003620:	2102      	movs	r1, #2
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fa32 	bl	8002a8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2103      	movs	r1, #3
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fa16 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x3a8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2103      	movs	r1, #3
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fa0b 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 800364a:	4603      	mov	r3, r0
 800364c:	0e9b      	lsrs	r3, r3, #26
 800364e:	f003 021f 	and.w	r2, r3, #31
 8003652:	e017      	b.n	8003684 <HAL_ADC_ConfigChannel+0x3d8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2103      	movs	r1, #3
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fa00 	bl	8002a60 <LL_ADC_GetOffsetChannel>
 8003660:	4603      	mov	r3, r0
 8003662:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800366c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800366e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003676:	2320      	movs	r3, #32
 8003678:	e003      	b.n	8003682 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800367a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <HAL_ADC_ConfigChannel+0x3f0>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0e9b      	lsrs	r3, r3, #26
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	e011      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x414>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e003      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80036b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d106      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2200      	movs	r2, #0
 80036ca:	2103      	movs	r1, #3
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff f9dd 	bl	8002a8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fb3e 	bl	8002d58 <LL_ADC_IsEnabled>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f040 8140 	bne.w	8003964 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6819      	ldr	r1, [r3, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f7ff fa99 	bl	8002c28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	4a8f      	ldr	r2, [pc, #572]	; (8003938 <HAL_ADC_ConfigChannel+0x68c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	f040 8131 	bne.w	8003964 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <HAL_ADC_ConfigChannel+0x47e>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	0e9b      	lsrs	r3, r3, #26
 8003718:	3301      	adds	r3, #1
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2b09      	cmp	r3, #9
 8003720:	bf94      	ite	ls
 8003722:	2301      	movls	r3, #1
 8003724:	2300      	movhi	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	e019      	b.n	800375e <HAL_ADC_ConfigChannel+0x4b2>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800373a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800373c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003742:	2320      	movs	r3, #32
 8003744:	e003      	b.n	800374e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003748:	fab3 f383 	clz	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	3301      	adds	r3, #1
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2b09      	cmp	r3, #9
 8003756:	bf94      	ite	ls
 8003758:	2301      	movls	r3, #1
 800375a:	2300      	movhi	r3, #0
 800375c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800375e:	2b00      	cmp	r3, #0
 8003760:	d079      	beq.n	8003856 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_ADC_ConfigChannel+0x4d2>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	0e9b      	lsrs	r3, r3, #26
 8003774:	3301      	adds	r3, #1
 8003776:	069b      	lsls	r3, r3, #26
 8003778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800377c:	e015      	b.n	80037aa <HAL_ADC_ConfigChannel+0x4fe>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800378c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003796:	2320      	movs	r3, #32
 8003798:	e003      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800379a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	069b      	lsls	r3, r3, #26
 80037a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x51e>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	0e9b      	lsrs	r3, r3, #26
 80037bc:	3301      	adds	r3, #1
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f303 	lsl.w	r3, r1, r3
 80037c8:	e017      	b.n	80037fa <HAL_ADC_ConfigChannel+0x54e>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80037e2:	2320      	movs	r3, #32
 80037e4:	e003      	b.n	80037ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80037e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2101      	movs	r1, #1
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	ea42 0103 	orr.w	r1, r2, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x574>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	0e9b      	lsrs	r3, r3, #26
 8003810:	3301      	adds	r3, #1
 8003812:	f003 021f 	and.w	r2, r3, #31
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	051b      	lsls	r3, r3, #20
 800381e:	e018      	b.n	8003852 <HAL_ADC_ConfigChannel+0x5a6>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003830:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003838:	2320      	movs	r3, #32
 800383a:	e003      	b.n	8003844 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800383c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	3301      	adds	r3, #1
 8003846:	f003 021f 	and.w	r2, r3, #31
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003852:	430b      	orrs	r3, r1
 8003854:	e081      	b.n	800395a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385e:	2b00      	cmp	r3, #0
 8003860:	d107      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x5c6>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0e9b      	lsrs	r3, r3, #26
 8003868:	3301      	adds	r3, #1
 800386a:	069b      	lsls	r3, r3, #26
 800386c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003870:	e015      	b.n	800389e <HAL_ADC_ConfigChannel+0x5f2>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800388a:	2320      	movs	r3, #32
 800388c:	e003      	b.n	8003896 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	3301      	adds	r3, #1
 8003898:	069b      	lsls	r3, r3, #26
 800389a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_ADC_ConfigChannel+0x612>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	0e9b      	lsrs	r3, r3, #26
 80038b0:	3301      	adds	r3, #1
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	e017      	b.n	80038ee <HAL_ADC_ConfigChannel+0x642>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	61fb      	str	r3, [r7, #28]
  return result;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80038d6:	2320      	movs	r3, #32
 80038d8:	e003      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	2101      	movs	r1, #1
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	ea42 0103 	orr.w	r1, r2, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10d      	bne.n	800391a <HAL_ADC_ConfigChannel+0x66e>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	0e9b      	lsrs	r3, r3, #26
 8003904:	3301      	adds	r3, #1
 8003906:	f003 021f 	and.w	r2, r3, #31
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	3b1e      	subs	r3, #30
 8003912:	051b      	lsls	r3, r3, #20
 8003914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003918:	e01e      	b.n	8003958 <HAL_ADC_ConfigChannel+0x6ac>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	613b      	str	r3, [r7, #16]
  return result;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d104      	bne.n	800393c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003932:	2320      	movs	r3, #32
 8003934:	e006      	b.n	8003944 <HAL_ADC_ConfigChannel+0x698>
 8003936:	bf00      	nop
 8003938:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f003 021f 	and.w	r2, r3, #31
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	3b1e      	subs	r3, #30
 8003952:	051b      	lsls	r3, r3, #20
 8003954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003958:	430b      	orrs	r3, r1
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	6892      	ldr	r2, [r2, #8]
 800395e:	4619      	mov	r1, r3
 8003960:	f7ff f937 	bl	8002bd2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_ADC_ConfigChannel+0x7bc>)
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d071      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003970:	483e      	ldr	r0, [pc, #248]	; (8003a6c <HAL_ADC_ConfigChannel+0x7c0>)
 8003972:	f7ff f843 	bl	80029fc <LL_ADC_GetCommonPathInternalCh>
 8003976:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a3c      	ldr	r2, [pc, #240]	; (8003a70 <HAL_ADC_ConfigChannel+0x7c4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d004      	beq.n	800398e <HAL_ADC_ConfigChannel+0x6e2>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a3a      	ldr	r2, [pc, #232]	; (8003a74 <HAL_ADC_ConfigChannel+0x7c8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d127      	bne.n	80039de <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800398e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d121      	bne.n	80039de <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a2:	d157      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039ac:	4619      	mov	r1, r3
 80039ae:	482f      	ldr	r0, [pc, #188]	; (8003a6c <HAL_ADC_ConfigChannel+0x7c0>)
 80039b0:	f7ff f811 	bl	80029d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039b4:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <HAL_ADC_ConfigChannel+0x7cc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	4a30      	ldr	r2, [pc, #192]	; (8003a7c <HAL_ADC_ConfigChannel+0x7d0>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	4613      	mov	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039ce:	e002      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f9      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039dc:	e03a      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a27      	ldr	r2, [pc, #156]	; (8003a80 <HAL_ADC_ConfigChannel+0x7d4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d113      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x764>
 80039e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <HAL_ADC_ConfigChannel+0x7d8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d02a      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a06:	4619      	mov	r1, r3
 8003a08:	4818      	ldr	r0, [pc, #96]	; (8003a6c <HAL_ADC_ConfigChannel+0x7c0>)
 8003a0a:	f7fe ffe4 	bl	80029d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a0e:	e021      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d11c      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d011      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a38:	4619      	mov	r1, r3
 8003a3a:	480c      	ldr	r0, [pc, #48]	; (8003a6c <HAL_ADC_ConfigChannel+0x7c0>)
 8003a3c:	f7fe ffcb 	bl	80029d6 <LL_ADC_SetCommonPathInternalCh>
 8003a40:	e008      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	37d8      	adds	r7, #216	; 0xd8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	80080000 	.word	0x80080000
 8003a6c:	50000300 	.word	0x50000300
 8003a70:	c3210000 	.word	0xc3210000
 8003a74:	90c00010 	.word	0x90c00010
 8003a78:	20000000 	.word	0x20000000
 8003a7c:	053e2d63 	.word	0x053e2d63
 8003a80:	c7520000 	.word	0xc7520000
 8003a84:	50000100 	.word	0x50000100
 8003a88:	cb840000 	.word	0xcb840000

08003a8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f95d 	bl	8002d58 <LL_ADC_IsEnabled>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d14d      	bne.n	8003b40 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <ADC_Enable+0xc0>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	f043 0210 	orr.w	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e039      	b.n	8003b42 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff f92c 	bl	8002d30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ad8:	f7fe ff3a 	bl	8002950 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ade:	e028      	b.n	8003b32 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff f937 	bl	8002d58 <LL_ADC_IsEnabled>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d104      	bne.n	8003afa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f91b 	bl	8002d30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003afa:	f7fe ff29 	bl	8002950 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d914      	bls.n	8003b32 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d00d      	beq.n	8003b32 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1a:	f043 0210 	orr.w	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e007      	b.n	8003b42 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d1cf      	bne.n	8003ae0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	8000003f 	.word	0x8000003f

08003b50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d14b      	bne.n	8003c02 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d021      	beq.n	8003bc8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe ffe3 	bl	8002b54 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d032      	beq.n	8003bfa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d12b      	bne.n	8003bfa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11f      	bne.n	8003bfa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bc6:	e018      	b.n	8003bfa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d111      	bne.n	8003bfa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	f043 0201 	orr.w	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff fb38 	bl	8003270 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c00:	e00e      	b.n	8003c20 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7ff fb42 	bl	8003298 <HAL_ADC_ErrorCallback>
}
 8003c14:	e004      	b.n	8003c20 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff fb24 	bl	8003284 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c62:	f043 0204 	orr.w	r2, r3, #4
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff fb14 	bl	8003298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <LL_ADC_IsEnabled>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <LL_ADC_IsEnabled+0x18>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LL_ADC_IsEnabled+0x1a>
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_ADC_REG_IsConversionOngoing>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d101      	bne.n	8003cb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b0a1      	sub	sp, #132	; 0x84
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e08b      	b.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003cea:	2300      	movs	r3, #0
 8003cec:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfa:	d102      	bne.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cfc:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	e001      	b.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e06a      	b.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ffb9 	bl	8003c9e <LL_ADC_REG_IsConversionOngoing>
 8003d2c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff ffb3 	bl	8003c9e <LL_ADC_REG_IsConversionOngoing>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d14c      	bne.n	8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d149      	bne.n	8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d44:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003d46:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d028      	beq.n	8003da2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d62:	035b      	lsls	r3, r3, #13
 8003d64:	430b      	orrs	r3, r1
 8003d66:	431a      	orrs	r2, r3
 8003d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d70:	f7ff ff82 	bl	8003c78 <LL_ADC_IsEnabled>
 8003d74:	4604      	mov	r4, r0
 8003d76:	4823      	ldr	r0, [pc, #140]	; (8003e04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d78:	f7ff ff7e 	bl	8003c78 <LL_ADC_IsEnabled>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4323      	orrs	r3, r4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d133      	bne.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d8c:	f023 030f 	bic.w	r3, r3, #15
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	6811      	ldr	r1, [r2, #0]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	6892      	ldr	r2, [r2, #8]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da0:	e024      	b.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003db2:	f7ff ff61 	bl	8003c78 <LL_ADC_IsEnabled>
 8003db6:	4604      	mov	r4, r0
 8003db8:	4812      	ldr	r0, [pc, #72]	; (8003e04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003dba:	f7ff ff5d 	bl	8003c78 <LL_ADC_IsEnabled>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4323      	orrs	r3, r4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d112      	bne.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003dce:	f023 030f 	bic.w	r3, r3, #15
 8003dd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003dd4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dd6:	e009      	b.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003dea:	e000      	b.n	8003dee <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003df6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3784      	adds	r7, #132	; 0x84
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd90      	pop	{r4, r7, pc}
 8003e02:	bf00      	nop
 8003e04:	50000100 	.word	0x50000100
 8003e08:	50000300 	.word	0x50000300

08003e0c <__NVIC_SetPriorityGrouping>:
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <__NVIC_SetPriorityGrouping+0x44>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e3e:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <__NVIC_SetPriorityGrouping+0x44>)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	60d3      	str	r3, [r2, #12]
}
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <__NVIC_GetPriorityGrouping>:
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <__NVIC_GetPriorityGrouping+0x18>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	f003 0307 	and.w	r3, r3, #7
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <__NVIC_EnableIRQ>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	db0b      	blt.n	8003e9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	f003 021f 	and.w	r2, r3, #31
 8003e88:	4907      	ldr	r1, [pc, #28]	; (8003ea8 <__NVIC_EnableIRQ+0x38>)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2001      	movs	r0, #1
 8003e92:	fa00 f202 	lsl.w	r2, r0, r2
 8003e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	e000e100 	.word	0xe000e100

08003eac <__NVIC_SetPriority>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	6039      	str	r1, [r7, #0]
 8003eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	db0a      	blt.n	8003ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	490c      	ldr	r1, [pc, #48]	; (8003ef8 <__NVIC_SetPriority+0x4c>)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	0112      	lsls	r2, r2, #4
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	440b      	add	r3, r1
 8003ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ed4:	e00a      	b.n	8003eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	4908      	ldr	r1, [pc, #32]	; (8003efc <__NVIC_SetPriority+0x50>)
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	3b04      	subs	r3, #4
 8003ee4:	0112      	lsls	r2, r2, #4
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	440b      	add	r3, r1
 8003eea:	761a      	strb	r2, [r3, #24]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000e100 	.word	0xe000e100
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <NVIC_EncodePriority>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	; 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f1c3 0307 	rsb	r3, r3, #7
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	bf28      	it	cs
 8003f1e:	2304      	movcs	r3, #4
 8003f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d902      	bls.n	8003f30 <NVIC_EncodePriority+0x30>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3b03      	subs	r3, #3
 8003f2e:	e000      	b.n	8003f32 <NVIC_EncodePriority+0x32>
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	401a      	ands	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f48:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	43d9      	mvns	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f58:	4313      	orrs	r3, r2
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3724      	adds	r7, #36	; 0x24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f78:	d301      	bcc.n	8003f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e00f      	b.n	8003f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <SysTick_Config+0x40>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f86:	210f      	movs	r1, #15
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	f7ff ff8e 	bl	8003eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <SysTick_Config+0x40>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <SysTick_Config+0x40>)
 8003f98:	2207      	movs	r2, #7
 8003f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	e000e010 	.word	0xe000e010

08003fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ff29 	bl	8003e0c <__NVIC_SetPriorityGrouping>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b086      	sub	sp, #24
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	4603      	mov	r3, r0
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fd0:	f7ff ff40 	bl	8003e54 <__NVIC_GetPriorityGrouping>
 8003fd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	6978      	ldr	r0, [r7, #20]
 8003fdc:	f7ff ff90 	bl	8003f00 <NVIC_EncodePriority>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff ff5f 	bl	8003eac <__NVIC_SetPriority>
}
 8003fee:	bf00      	nop
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff ff33 	bl	8003e70 <__NVIC_EnableIRQ>
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff ffa4 	bl	8003f68 <SysTick_Config>
 8004020:	4603      	mov	r3, r0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e08d      	b.n	800415a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	4b47      	ldr	r3, [pc, #284]	; (8004164 <HAL_DMA_Init+0x138>)
 8004046:	429a      	cmp	r2, r3
 8004048:	d80f      	bhi.n	800406a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	4b45      	ldr	r3, [pc, #276]	; (8004168 <HAL_DMA_Init+0x13c>)
 8004052:	4413      	add	r3, r2
 8004054:	4a45      	ldr	r2, [pc, #276]	; (800416c <HAL_DMA_Init+0x140>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	009a      	lsls	r2, r3, #2
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a42      	ldr	r2, [pc, #264]	; (8004170 <HAL_DMA_Init+0x144>)
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
 8004068:	e00e      	b.n	8004088 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	4b40      	ldr	r3, [pc, #256]	; (8004174 <HAL_DMA_Init+0x148>)
 8004072:	4413      	add	r3, r2
 8004074:	4a3d      	ldr	r2, [pc, #244]	; (800416c <HAL_DMA_Init+0x140>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	009a      	lsls	r2, r3, #2
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a3c      	ldr	r2, [pc, #240]	; (8004178 <HAL_DMA_Init+0x14c>)
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9b6 	bl	800444c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040e8:	d102      	bne.n	80040f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004104:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d010      	beq.n	8004130 <HAL_DMA_Init+0x104>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b04      	cmp	r3, #4
 8004114:	d80c      	bhi.n	8004130 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9d6 	bl	80044c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	e008      	b.n	8004142 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40020407 	.word	0x40020407
 8004168:	bffdfff8 	.word	0xbffdfff8
 800416c:	cccccccd 	.word	0xcccccccd
 8004170:	40020000 	.word	0x40020000
 8004174:	bffdfbf8 	.word	0xbffdfbf8
 8004178:	40020400 	.word	0x40020400

0800417c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_DMA_Start_IT+0x20>
 8004198:	2302      	movs	r3, #2
 800419a:	e066      	b.n	800426a <HAL_DMA_Start_IT+0xee>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d155      	bne.n	800425c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f8fb 	bl	80043d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 020e 	orr.w	r2, r2, #14
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	e00f      	b.n	8004214 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0204 	bic.w	r2, r2, #4
 8004202:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 020a 	orr.w	r2, r2, #10
 8004212:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004230:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004248:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e005      	b.n	8004268 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004264:	2302      	movs	r3, #2
 8004266:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004268:	7dfb      	ldrb	r3, [r7, #23]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	2204      	movs	r2, #4
 8004294:	409a      	lsls	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d026      	beq.n	80042ec <HAL_DMA_IRQHandler+0x7a>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d021      	beq.n	80042ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d107      	bne.n	80042c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0204 	bic.w	r2, r2, #4
 80042c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f003 021f 	and.w	r2, r3, #31
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	2104      	movs	r1, #4
 80042d4:	fa01 f202 	lsl.w	r2, r1, r2
 80042d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d071      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042ea:	e06c      	b.n	80043c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2202      	movs	r2, #2
 80042f6:	409a      	lsls	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d02e      	beq.n	800435e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d029      	beq.n	800435e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 020a 	bic.w	r2, r2, #10
 8004326:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	2102      	movs	r1, #2
 800433e:	fa01 f202 	lsl.w	r2, r1, r2
 8004342:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d038      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800435c:	e033      	b.n	80043c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	2208      	movs	r2, #8
 8004368:	409a      	lsls	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d02a      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d025      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 020e 	bic.w	r2, r2, #14
 800438a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	2101      	movs	r1, #1
 800439a:	fa01 f202 	lsl.w	r2, r1, r2
 800439e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
}
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f003 021f 	and.w	r2, r3, #31
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2101      	movs	r1, #1
 8004408:	fa01 f202 	lsl.w	r2, r1, r2
 800440c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b10      	cmp	r3, #16
 800441c:	d108      	bne.n	8004430 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800442e:	e007      	b.n	8004440 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800445c:	429a      	cmp	r2, r3
 800445e:	d802      	bhi.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004460:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e001      	b.n	800446a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004466:	4b15      	ldr	r3, [pc, #84]	; (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004468:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	3b08      	subs	r3, #8
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	089b      	lsrs	r3, r3, #2
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	461a      	mov	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004496:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2201      	movs	r2, #1
 80044a0:	409a      	lsls	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40020407 	.word	0x40020407
 80044b8:	40020800 	.word	0x40020800
 80044bc:	40020820 	.word	0x40020820
 80044c0:	cccccccd 	.word	0xcccccccd
 80044c4:	40020880 	.word	0x40020880

080044c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	461a      	mov	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a08      	ldr	r2, [pc, #32]	; (800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044ea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	2201      	movs	r2, #1
 80044f6:	409a      	lsls	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	1000823f 	.word	0x1000823f
 800450c:	40020940 	.word	0x40020940

08004510 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e147      	b.n	80047b2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fc fbb0 	bl	8000c9c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0210 	bic.w	r2, r2, #16
 800454a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800454c:	f7fe fa00 	bl	8002950 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004552:	e012      	b.n	800457a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004554:	f7fe f9fc 	bl	8002950 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b0a      	cmp	r3, #10
 8004560:	d90b      	bls.n	800457a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004566:	f043 0201 	orr.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2203      	movs	r2, #3
 8004572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e11b      	b.n	80047b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b08      	cmp	r3, #8
 8004586:	d0e5      	beq.n	8004554 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004598:	f7fe f9da 	bl	8002950 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800459e:	e012      	b.n	80045c6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80045a0:	f7fe f9d6 	bl	8002950 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b0a      	cmp	r3, #10
 80045ac:	d90b      	bls.n	80045c6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b2:	f043 0201 	orr.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2203      	movs	r2, #3
 80045be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0f5      	b.n	80047b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0e5      	beq.n	80045a0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0202 	orr.w	r2, r2, #2
 80045e2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a74      	ldr	r2, [pc, #464]	; (80047bc <HAL_FDCAN_Init+0x2ac>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d103      	bne.n	80045f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80045ee:	4a74      	ldr	r2, [pc, #464]	; (80047c0 <HAL_FDCAN_Init+0x2b0>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7c1b      	ldrb	r3, [r3, #16]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d108      	bne.n	8004610 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460c:	619a      	str	r2, [r3, #24]
 800460e:	e007      	b.n	8004620 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	7c5b      	ldrb	r3, [r3, #17]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d108      	bne.n	800463a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004636:	619a      	str	r2, [r3, #24]
 8004638:	e007      	b.n	800464a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699a      	ldr	r2, [r3, #24]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004648:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	7c9b      	ldrb	r3, [r3, #18]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d108      	bne.n	8004664 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004660:	619a      	str	r2, [r3, #24]
 8004662:	e007      	b.n	8004674 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004672:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004698:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0210 	bic.w	r2, r2, #16
 80046a8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d108      	bne.n	80046c4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0204 	orr.w	r2, r2, #4
 80046c0:	619a      	str	r2, [r3, #24]
 80046c2:	e02c      	b.n	800471e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d028      	beq.n	800471e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d01c      	beq.n	800470e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046e2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0210 	orr.w	r2, r2, #16
 80046f2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d110      	bne.n	800471e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0220 	orr.w	r2, r2, #32
 800470a:	619a      	str	r2, [r3, #24]
 800470c:	e007      	b.n	800471e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0220 	orr.w	r2, r2, #32
 800471c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	3b01      	subs	r3, #1
 8004724:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	3b01      	subs	r3, #1
 800472c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800472e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004736:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	3b01      	subs	r3, #1
 8004740:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004746:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004748:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004752:	d115      	bne.n	8004780 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	3b01      	subs	r3, #1
 8004760:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004762:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	3b01      	subs	r3, #1
 800476a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800476c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	3b01      	subs	r3, #1
 8004776:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800477c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800477e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f9c2 	bl	8004b20 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40006400 	.word	0x40006400
 80047c0:	40006500 	.word	0x40006500

080047c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e0:	4013      	ands	r3, r2
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	6a3a      	ldr	r2, [r7, #32]
 80047f8:	4013      	ands	r3, r2
 80047fa:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004806:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	4013      	ands	r3, r2
 8004812:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800481e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004832:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004836:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4013      	ands	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2240      	movs	r2, #64	; 0x40
 8004866:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f939 	bl	8004ae0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01b      	beq.n	80048b4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d014      	beq.n	80048b4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004892:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4013      	ands	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80048ac:	6939      	ldr	r1, [r7, #16]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8f7 	bl	8004aa2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80048c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8b6 	bl	8004a36 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a3a      	ldr	r2, [r7, #32]
 80048d6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80048d8:	6a39      	ldr	r1, [r7, #32]
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8b6 	bl	8004a4c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80048ee:	69f9      	ldr	r1, [r7, #28]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8b6 	bl	8004a62 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00e      	beq.n	8004922 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f8ab 	bl	8004a78 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01a      	beq.n	8004966 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	2b00      	cmp	r3, #0
 800493c:	d013      	beq.n	8004966 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004946:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4013      	ands	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2280      	movs	r2, #128	; 0x80
 800495c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f893 	bl	8004a8c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00e      	beq.n	8004992 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800498a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f893 	bl	8004ab8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80049b6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f887 	bl	8004acc <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d011      	beq.n	80049f0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80049fe:	6979      	ldr	r1, [r7, #20]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f881 	bl	8004b08 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f863 	bl	8004af4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004a2e:	bf00      	nop
 8004a30:	3728      	adds	r7, #40	; 0x28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
	...

08004b20 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004b28:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004b2a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b3a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	041a      	lsls	r2, r3, #16
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b60:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	061a      	lsls	r2, r3, #24
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e005      	b.n	8004bae <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3304      	adds	r3, #4
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d3f3      	bcc.n	8004ba2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004bba:	bf00      	nop
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	4000a400 	.word	0x4000a400

08004bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bda:	e15a      	b.n	8004e92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	2101      	movs	r1, #1
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	fa01 f303 	lsl.w	r3, r1, r3
 8004be8:	4013      	ands	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 814c 	beq.w	8004e8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d005      	beq.n	8004c0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d130      	bne.n	8004c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	2203      	movs	r2, #3
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4013      	ands	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c42:	2201      	movs	r2, #1
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	f003 0201 	and.w	r2, r3, #1
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d017      	beq.n	8004caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	2203      	movs	r2, #3
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d123      	bne.n	8004cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	08da      	lsrs	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3208      	adds	r2, #8
 8004cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	220f      	movs	r2, #15
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	08da      	lsrs	r2, r3, #3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3208      	adds	r2, #8
 8004cf8:	6939      	ldr	r1, [r7, #16]
 8004cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	2203      	movs	r2, #3
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4013      	ands	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0203 	and.w	r2, r3, #3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80a6 	beq.w	8004e8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d40:	4b5b      	ldr	r3, [pc, #364]	; (8004eb0 <HAL_GPIO_Init+0x2e4>)
 8004d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d44:	4a5a      	ldr	r2, [pc, #360]	; (8004eb0 <HAL_GPIO_Init+0x2e4>)
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	6613      	str	r3, [r2, #96]	; 0x60
 8004d4c:	4b58      	ldr	r3, [pc, #352]	; (8004eb0 <HAL_GPIO_Init+0x2e4>)
 8004d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d58:	4a56      	ldr	r2, [pc, #344]	; (8004eb4 <HAL_GPIO_Init+0x2e8>)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	089b      	lsrs	r3, r3, #2
 8004d5e:	3302      	adds	r3, #2
 8004d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	220f      	movs	r2, #15
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d82:	d01f      	beq.n	8004dc4 <HAL_GPIO_Init+0x1f8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a4c      	ldr	r2, [pc, #304]	; (8004eb8 <HAL_GPIO_Init+0x2ec>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d019      	beq.n	8004dc0 <HAL_GPIO_Init+0x1f4>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a4b      	ldr	r2, [pc, #300]	; (8004ebc <HAL_GPIO_Init+0x2f0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_GPIO_Init+0x1f0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a4a      	ldr	r2, [pc, #296]	; (8004ec0 <HAL_GPIO_Init+0x2f4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00d      	beq.n	8004db8 <HAL_GPIO_Init+0x1ec>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a49      	ldr	r2, [pc, #292]	; (8004ec4 <HAL_GPIO_Init+0x2f8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d007      	beq.n	8004db4 <HAL_GPIO_Init+0x1e8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a48      	ldr	r2, [pc, #288]	; (8004ec8 <HAL_GPIO_Init+0x2fc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d101      	bne.n	8004db0 <HAL_GPIO_Init+0x1e4>
 8004dac:	2305      	movs	r3, #5
 8004dae:	e00a      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004db0:	2306      	movs	r3, #6
 8004db2:	e008      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004db4:	2304      	movs	r3, #4
 8004db6:	e006      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004db8:	2303      	movs	r3, #3
 8004dba:	e004      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e002      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	f002 0203 	and.w	r2, r2, #3
 8004dcc:	0092      	lsls	r2, r2, #2
 8004dce:	4093      	lsls	r3, r2
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dd6:	4937      	ldr	r1, [pc, #220]	; (8004eb4 <HAL_GPIO_Init+0x2e8>)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	3302      	adds	r3, #2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004de4:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e08:	4a30      	ldr	r2, [pc, #192]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e32:	4a26      	ldr	r2, [pc, #152]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e38:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4013      	ands	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e62:	4b1a      	ldr	r3, [pc, #104]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e86:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f47f ae9d 	bne.w	8004bdc <HAL_GPIO_Init+0x10>
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	48000400 	.word	0x48000400
 8004ebc:	48000800 	.word	0x48000800
 8004ec0:	48000c00 	.word	0x48000c00
 8004ec4:	48001000 	.word	0x48001000
 8004ec8:	48001400 	.word	0x48001400
 8004ecc:	40010400 	.word	0x40010400

08004ed0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a04      	ldr	r2, [pc, #16]	; (8004eec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ede:	6093      	str	r3, [r2, #8]
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40007000 	.word	0x40007000

08004ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20000000 	.word	0x20000000

08004f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f0c:	f7ff fff0 	bl	8004ef0 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0adb      	lsrs	r3, r3, #11
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4904      	ldr	r1, [pc, #16]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	08006a60 	.word	0x08006a60

08004f34 <LL_COMP_IsLocked>:
  * @rmtoll CSR      LOCK           LL_COMP_IsLocked
  * @param  COMPx Comparator instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_COMP_IsLocked(COMP_TypeDef *COMPx)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(COMPx->CSR, COMP_CSR_LOCK) == (COMP_CSR_LOCK)) ? 1UL : 0UL);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f48:	d101      	bne.n	8004f4e <LL_COMP_IsLocked+0x1a>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <LL_COMP_IsLocked+0x1c>
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <LL_COMP_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: COMP registers are initialized
  *          - ERROR: COMP registers are not initialized
  */
ErrorStatus LL_COMP_Init(COMP_TypeDef *COMPx, LL_COMP_InitTypeDef *COMP_InitStruct)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_COMP_OUTPUT_POLARITY(COMP_InitStruct->OutputPolarity));
  assert_param(IS_LL_COMP_OUTPUT_BLANKING_SOURCE(COMPx, COMP_InitStruct->OutputBlankingSource));

  /* Note: Hardware constraint (refer to description of this function)        */
  /*       COMP instance must not be locked.                                  */
  if (LL_COMP_IsLocked(COMPx) == 0UL)
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff ffe2 	bl	8004f34 <LL_COMP_IsLocked>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d115      	bne.n	8004fa2 <LL_COMP_Init+0x46>
    /*  - InputPlus                                                           */
    /*  - InputMinus                                                          */
    /*  - InputHysteresis                                                     */
    /*  - OutputPolarity                                                      */
    /*  - OutputBlankingSource                                                */
    MODIFY_REG(COMPx->CSR,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <LL_COMP_Init+0x54>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	6811      	ldr	r1, [r2, #0]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	6852      	ldr	r2, [r2, #4]
 8004f86:	4311      	orrs	r1, r2
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	6892      	ldr	r2, [r2, #8]
 8004f8c:	4311      	orrs	r1, r2
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	68d2      	ldr	r2, [r2, #12]
 8004f92:	4311      	orrs	r1, r2
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	6912      	ldr	r2, [r2, #16]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e001      	b.n	8004fa6 <LL_COMP_Init+0x4a>

  }
  else
  {
    /* Initialization error: COMP instance is locked.                         */
    status = ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	ff007e0f 	.word	0xff007e0f

08004fb4 <LL_DAC_IsEnabled>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(DACx->CR,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2101      	movs	r1, #1
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	401a      	ands	r2, r3
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d101      	bne.n	8004fe4 <LL_DAC_IsEnabled+0x30>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <LL_DAC_IsEnabled+0x32>
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]
                                                  DAC_InitStruct->WaveAutoGenerationConfig));
  }

  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if (LL_DAC_IsEnabled(DACx, DAC_Channel) == 0UL)
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff ffd5 	bl	8004fb4 <LL_DAC_IsEnabled>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	f040 8090 	bne.w	8005132 <LL_DAC_Init+0x140>
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    /*  - OutputConnection                                                    */
    /*  - OutputMode                                                          */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d05c      	beq.n	80050d4 <LL_DAC_Init+0xe2>
    {
      if (DAC_InitStruct->WaveAutoGeneration == LL_DAC_WAVE_AUTO_GENERATION_SAWTOOTH)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2bc0      	cmp	r3, #192	; 0xc0
 8005020:	d13c      	bne.n	800509c <LL_DAC_Init+0xaa>
      {
        assert_param(IS_LL_DAC_TRIGGER_SOURCE2(DACx, DAC_InitStruct->TriggerSource2));

        MODIFY_REG(DACx->CR,
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	21c0      	movs	r1, #192	; 0xc0
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	401a      	ands	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6899      	ldr	r1, [r3, #8]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	431a      	orrs	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	601a      	str	r2, [r3, #0]
                   DAC_CR_WAVE1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK),
                   DAC_InitStruct->WaveAutoGeneration << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                  );
        MODIFY_REG(DACx->STMODR,
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	401a      	ands	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	0899      	lsrs	r1, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	4319      	orrs	r1, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	fa01 f303 	lsl.w	r3, r1, r3
 800507a:	431a      	orrs	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	661a      	str	r2, [r3, #96]	; 0x60
                   (
                     ((DAC_InitStruct->TriggerSource >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos)
                     | ((DAC_InitStruct->TriggerSource2 >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos)
                   ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                  );
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3358      	adds	r3, #88	; 0x58
 8005084:	461a      	mov	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	09db      	lsrs	r3, r3, #7
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	4413      	add	r3, r2
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e02f      	b.n	80050fc <LL_DAC_Init+0x10a>
                  DAC_InitStruct->WaveAutoGenerationConfig);
      }
      else
      {
        MODIFY_REG(DACx->CR,
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	f640 71fc 	movw	r1, #4092	; 0xffc
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	43db      	mvns	r3, r3
 80050b0:	401a      	ands	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6819      	ldr	r1, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	4319      	orrs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4319      	orrs	r1, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	431a      	orrs	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	e013      	b.n	80050fc <LL_DAC_Init+0x10a>
                  );
      }
    }
    else
    {
      MODIFY_REG(DACx->CR,
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	21fc      	movs	r1, #252	; 0xfc
 80050e0:	fa01 f303 	lsl.w	r3, r1, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	401a      	ands	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6819      	ldr	r1, [r3, #0]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	fa01 f303 	lsl.w	r3, r1, r3
 80050f6:	431a      	orrs	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]
                 (DAC_InitStruct->TriggerSource
                  | LL_DAC_WAVE_AUTO_GENERATION_NONE
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    MODIFY_REG(DACx->MCR,
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	2107      	movs	r1, #7
 8005108:	fa01 f303 	lsl.w	r3, r1, r3
 800510c:	43db      	mvns	r3, r3
 800510e:	401a      	ands	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6919      	ldr	r1, [r3, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	4319      	orrs	r1, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	4319      	orrs	r1, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	fa01 f303 	lsl.w	r3, r1, r3
 800512a:	431a      	orrs	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005130:	e001      	b.n	8005136 <LL_DAC_Init+0x144>
              );
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005136:	7dfb      	ldrb	r3, [r7, #23]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <LL_EXTI_EnableIT_0_31>:
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <LL_EXTI_EnableIT_0_31+0x20>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4904      	ldr	r1, [pc, #16]	; (8005160 <LL_EXTI_EnableIT_0_31+0x20>)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4313      	orrs	r3, r2
 8005152:	600b      	str	r3, [r1, #0]
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40010400 	.word	0x40010400

08005164 <LL_EXTI_EnableIT_32_63>:
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <LL_EXTI_EnableIT_32_63+0x20>)
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	4904      	ldr	r1, [pc, #16]	; (8005184 <LL_EXTI_EnableIT_32_63+0x20>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4313      	orrs	r3, r2
 8005176:	620b      	str	r3, [r1, #32]
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40010400 	.word	0x40010400

08005188 <LL_EXTI_DisableIT_0_31>:
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005190:	4b06      	ldr	r3, [pc, #24]	; (80051ac <LL_EXTI_DisableIT_0_31+0x24>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	43db      	mvns	r3, r3
 8005198:	4904      	ldr	r1, [pc, #16]	; (80051ac <LL_EXTI_DisableIT_0_31+0x24>)
 800519a:	4013      	ands	r3, r2
 800519c:	600b      	str	r3, [r1, #0]
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010400 	.word	0x40010400

080051b0 <LL_EXTI_DisableIT_32_63>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <LL_EXTI_DisableIT_32_63+0x24>)
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	43db      	mvns	r3, r3
 80051c0:	4904      	ldr	r1, [pc, #16]	; (80051d4 <LL_EXTI_DisableIT_32_63+0x24>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	620b      	str	r3, [r1, #32]
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010400 	.word	0x40010400

080051d8 <LL_EXTI_EnableEvent_0_31>:
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	4904      	ldr	r1, [pc, #16]	; (80051f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	604b      	str	r3, [r1, #4]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40010400 	.word	0x40010400

080051fc <LL_EXTI_EnableEvent_32_63>:
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <LL_EXTI_EnableEvent_32_63+0x20>)
 8005206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005208:	4904      	ldr	r1, [pc, #16]	; (800521c <LL_EXTI_EnableEvent_32_63+0x20>)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4313      	orrs	r3, r2
 800520e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40010400 	.word	0x40010400

08005220 <LL_EXTI_DisableEvent_0_31>:
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <LL_EXTI_DisableEvent_0_31+0x24>)
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	43db      	mvns	r3, r3
 8005230:	4904      	ldr	r1, [pc, #16]	; (8005244 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005232:	4013      	ands	r3, r2
 8005234:	604b      	str	r3, [r1, #4]
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010400 	.word	0x40010400

08005248 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <LL_EXTI_DisableEvent_32_63+0x24>)
 8005252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	43db      	mvns	r3, r3
 8005258:	4904      	ldr	r1, [pc, #16]	; (800526c <LL_EXTI_DisableEvent_32_63+0x24>)
 800525a:	4013      	ands	r3, r2
 800525c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40010400 	.word	0x40010400

08005270 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	4904      	ldr	r1, [pc, #16]	; (8005290 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]

}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	40010400 	.word	0x40010400

08005294 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800529e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a0:	4904      	ldr	r1, [pc, #16]	; (80052b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40010400 	.word	0x40010400

080052b8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	43db      	mvns	r3, r3
 80052c8:	4904      	ldr	r1, [pc, #16]	; (80052dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	608b      	str	r3, [r1, #8]

}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010400 	.word	0x40010400

080052e0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80052e8:	4b06      	ldr	r3, [pc, #24]	; (8005304 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80052ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	43db      	mvns	r3, r3
 80052f0:	4904      	ldr	r1, [pc, #16]	; (8005304 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40010400 	.word	0x40010400

08005308 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	4904      	ldr	r1, [pc, #16]	; (8005328 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4313      	orrs	r3, r2
 800531a:	60cb      	str	r3, [r1, #12]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40010400 	.word	0x40010400

0800532c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	4904      	ldr	r1, [pc, #16]	; (800534c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4313      	orrs	r3, r2
 800533e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40010400 	.word	0x40010400

08005350 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	43db      	mvns	r3, r3
 8005360:	4904      	ldr	r1, [pc, #16]	; (8005374 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005362:	4013      	ands	r3, r2
 8005364:	60cb      	str	r3, [r1, #12]
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010400 	.word	0x40010400

08005378 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	43db      	mvns	r3, r3
 8005388:	4904      	ldr	r1, [pc, #16]	; (800539c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800538a:	4013      	ands	r3, r2
 800538c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40010400 	.word	0x40010400

080053a0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	7a1b      	ldrb	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80d3 	beq.w	800555c <LL_EXTI_Init+0x1bc>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d063      	beq.n	8005486 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7a5b      	ldrb	r3, [r3, #9]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d01c      	beq.n	8005400 <LL_EXTI_Init+0x60>
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	dc25      	bgt.n	8005416 <LL_EXTI_Init+0x76>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <LL_EXTI_Init+0x34>
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d00b      	beq.n	80053ea <LL_EXTI_Init+0x4a>
 80053d2:	e020      	b.n	8005416 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff ff21 	bl	8005220 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff feac 	bl	8005140 <LL_EXTI_EnableIT_0_31>
          break;
 80053e8:	e018      	b.n	800541c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff feca 	bl	8005188 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff feed 	bl	80051d8 <LL_EXTI_EnableEvent_0_31>
          break;
 80053fe:	e00d      	b.n	800541c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fe9b 	bl	8005140 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fee2 	bl	80051d8 <LL_EXTI_EnableEvent_0_31>
          break;
 8005414:	e002      	b.n	800541c <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8005416:	2301      	movs	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
          break;
 800541a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	7a9b      	ldrb	r3, [r3, #10]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d030      	beq.n	8005486 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	7a9b      	ldrb	r3, [r3, #10]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d01c      	beq.n	8005466 <LL_EXTI_Init+0xc6>
 800542c:	2b03      	cmp	r3, #3
 800542e:	dc25      	bgt.n	800547c <LL_EXTI_Init+0xdc>
 8005430:	2b01      	cmp	r3, #1
 8005432:	d002      	beq.n	800543a <LL_EXTI_Init+0x9a>
 8005434:	2b02      	cmp	r3, #2
 8005436:	d00b      	beq.n	8005450 <LL_EXTI_Init+0xb0>
 8005438:	e020      	b.n	800547c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff ff86 	bl	8005350 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff ff11 	bl	8005270 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800544e:	e01b      	b.n	8005488 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff ff2f 	bl	80052b8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff ff52 	bl	8005308 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005464:	e010      	b.n	8005488 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff ff00 	bl	8005270 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff ff47 	bl	8005308 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800547a:	e005      	b.n	8005488 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f043 0302 	orr.w	r3, r3, #2
 8005482:	60fb      	str	r3, [r7, #12]
            break;
 8005484:	e000      	b.n	8005488 <LL_EXTI_Init+0xe8>
        }
      }
 8005486:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d07a      	beq.n	8005586 <LL_EXTI_Init+0x1e6>
    {
      switch (EXTI_InitStruct->Mode)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	7a5b      	ldrb	r3, [r3, #9]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d01c      	beq.n	80054d2 <LL_EXTI_Init+0x132>
 8005498:	2b02      	cmp	r3, #2
 800549a:	dc25      	bgt.n	80054e8 <LL_EXTI_Init+0x148>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <LL_EXTI_Init+0x106>
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d00b      	beq.n	80054bc <LL_EXTI_Init+0x11c>
 80054a4:	e020      	b.n	80054e8 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fecc 	bl	8005248 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fe55 	bl	8005164 <LL_EXTI_EnableIT_32_63>
          break;
 80054ba:	e01a      	b.n	80054f2 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fe75 	bl	80051b0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fe96 	bl	80051fc <LL_EXTI_EnableEvent_32_63>
          break;
 80054d0:	e00f      	b.n	80054f2 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff fe44 	bl	8005164 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fe8b 	bl	80051fc <LL_EXTI_EnableEvent_32_63>
          break;
 80054e6:	e004      	b.n	80054f2 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f043 0304 	orr.w	r3, r3, #4
 80054ee:	60fb      	str	r3, [r7, #12]
          break;
 80054f0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	7a9b      	ldrb	r3, [r3, #10]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d045      	beq.n	8005586 <LL_EXTI_Init+0x1e6>
      {
        switch (EXTI_InitStruct->Trigger)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	7a9b      	ldrb	r3, [r3, #10]
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d01c      	beq.n	800553c <LL_EXTI_Init+0x19c>
 8005502:	2b03      	cmp	r3, #3
 8005504:	dc25      	bgt.n	8005552 <LL_EXTI_Init+0x1b2>
 8005506:	2b01      	cmp	r3, #1
 8005508:	d002      	beq.n	8005510 <LL_EXTI_Init+0x170>
 800550a:	2b02      	cmp	r3, #2
 800550c:	d00b      	beq.n	8005526 <LL_EXTI_Init+0x186>
 800550e:	e020      	b.n	8005552 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff ff2f 	bl	8005378 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff feb8 	bl	8005294 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8005524:	e030      	b.n	8005588 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff fed8 	bl	80052e0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fef9 	bl	800532c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800553a:	e025      	b.n	8005588 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fea7 	bl	8005294 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff feee 	bl	800532c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005550:	e01a      	b.n	8005588 <LL_EXTI_Init+0x1e8>
          default:
            status |= 0x05u;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f043 0305 	orr.w	r3, r3, #5
 8005558:	60fb      	str	r3, [r7, #12]
            break;
 800555a:	e015      	b.n	8005588 <LL_EXTI_Init+0x1e8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fe11 	bl	8005188 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fe58 	bl	8005220 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fe1b 	bl	80051b0 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fe62 	bl	8005248 <LL_EXTI_DisableEvent_32_63>
 8005584:	e000      	b.n	8005588 <LL_EXTI_Init+0x1e8>
      }
 8005586:	bf00      	nop
  }

  return status;
 8005588:	68fb      	ldr	r3, [r7, #12]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <LL_GPIO_SetPinMode>:
{
 8005592:	b480      	push	{r7}
 8005594:	b08b      	sub	sp, #44	; 0x2c
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	fa93 f3a3 	rbit	r3, r3
 80055ac:	613b      	str	r3, [r7, #16]
  return result;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80055b8:	2320      	movs	r3, #32
 80055ba:	e003      	b.n	80055c4 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	fab3 f383 	clz	r3, r3
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	2103      	movs	r1, #3
 80055c8:	fa01 f303 	lsl.w	r3, r1, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	401a      	ands	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	fa93 f3a3 	rbit	r3, r3
 80055da:	61fb      	str	r3, [r7, #28]
  return result;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80055e6:	2320      	movs	r3, #32
 80055e8:	e003      	b.n	80055f2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	fab3 f383 	clz	r3, r3
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	fa01 f303 	lsl.w	r3, r1, r3
 80055fa:	431a      	orrs	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]
}
 8005600:	bf00      	nop
 8005602:	372c      	adds	r7, #44	; 0x2c
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <LL_GPIO_SetPinOutputType>:
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	43db      	mvns	r3, r3
 8005620:	401a      	ands	r2, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	fb01 f303 	mul.w	r3, r1, r3
 800562a:	431a      	orrs	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	605a      	str	r2, [r3, #4]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <LL_GPIO_SetPinSpeed>:
{
 800563c:	b480      	push	{r7}
 800563e:	b08b      	sub	sp, #44	; 0x2c
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	fa93 f3a3 	rbit	r3, r3
 8005656:	613b      	str	r3, [r7, #16]
  return result;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005662:	2320      	movs	r3, #32
 8005664:	e003      	b.n	800566e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	fab3 f383 	clz	r3, r3
 800566c:	b2db      	uxtb	r3, r3
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	2103      	movs	r1, #3
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	43db      	mvns	r3, r3
 8005678:	401a      	ands	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	fa93 f3a3 	rbit	r3, r3
 8005684:	61fb      	str	r3, [r7, #28]
  return result;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005690:	2320      	movs	r3, #32
 8005692:	e003      	b.n	800569c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	fab3 f383 	clz	r3, r3
 800569a:	b2db      	uxtb	r3, r3
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
 80056a4:	431a      	orrs	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	609a      	str	r2, [r3, #8]
}
 80056aa:	bf00      	nop
 80056ac:	372c      	adds	r7, #44	; 0x2c
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <LL_GPIO_SetPinPull>:
{
 80056b6:	b480      	push	{r7}
 80056b8:	b08b      	sub	sp, #44	; 0x2c
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	fa93 f3a3 	rbit	r3, r3
 80056d0:	613b      	str	r3, [r7, #16]
  return result;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80056dc:	2320      	movs	r3, #32
 80056de:	e003      	b.n	80056e8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	fab3 f383 	clz	r3, r3
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2103      	movs	r1, #3
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	401a      	ands	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	fa93 f3a3 	rbit	r3, r3
 80056fe:	61fb      	str	r3, [r7, #28]
  return result;
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800570a:	2320      	movs	r3, #32
 800570c:	e003      	b.n	8005716 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	fab3 f383 	clz	r3, r3
 8005714:	b2db      	uxtb	r3, r3
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	fa01 f303 	lsl.w	r3, r1, r3
 800571e:	431a      	orrs	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	60da      	str	r2, [r3, #12]
}
 8005724:	bf00      	nop
 8005726:	372c      	adds	r7, #44	; 0x2c
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <LL_GPIO_SetAFPin_0_7>:
{
 8005730:	b480      	push	{r7}
 8005732:	b08b      	sub	sp, #44	; 0x2c
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a1a      	ldr	r2, [r3, #32]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	fa93 f3a3 	rbit	r3, r3
 800574a:	613b      	str	r3, [r7, #16]
  return result;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005756:	2320      	movs	r3, #32
 8005758:	e003      	b.n	8005762 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	fab3 f383 	clz	r3, r3
 8005760:	b2db      	uxtb	r3, r3
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	210f      	movs	r1, #15
 8005766:	fa01 f303 	lsl.w	r3, r1, r3
 800576a:	43db      	mvns	r3, r3
 800576c:	401a      	ands	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	fa93 f3a3 	rbit	r3, r3
 8005778:	61fb      	str	r3, [r7, #28]
  return result;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005784:	2320      	movs	r3, #32
 8005786:	e003      	b.n	8005790 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	fab3 f383 	clz	r3, r3
 800578e:	b2db      	uxtb	r3, r3
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	fa01 f303 	lsl.w	r3, r1, r3
 8005798:	431a      	orrs	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	372c      	adds	r7, #44	; 0x2c
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <LL_GPIO_SetAFPin_8_15>:
{
 80057aa:	b480      	push	{r7}
 80057ac:	b08b      	sub	sp, #44	; 0x2c
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	0a1b      	lsrs	r3, r3, #8
 80057be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	fa93 f3a3 	rbit	r3, r3
 80057c6:	613b      	str	r3, [r7, #16]
  return result;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80057d2:	2320      	movs	r3, #32
 80057d4:	e003      	b.n	80057de <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	fab3 f383 	clz	r3, r3
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	210f      	movs	r1, #15
 80057e2:	fa01 f303 	lsl.w	r3, r1, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	401a      	ands	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	fa93 f3a3 	rbit	r3, r3
 80057f6:	61fb      	str	r3, [r7, #28]
  return result;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005802:	2320      	movs	r3, #32
 8005804:	e003      	b.n	800580e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	fab3 f383 	clz	r3, r3
 800580c:	b2db      	uxtb	r3, r3
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	431a      	orrs	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800581c:	bf00      	nop
 800581e:	372c      	adds	r7, #44	; 0x2c
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	fa93 f3a3 	rbit	r3, r3
 800583e:	60fb      	str	r3, [r7, #12]
  return result;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <LL_GPIO_Init+0x26>
    return 32U;
 800584a:	2320      	movs	r3, #32
 800584c:	e003      	b.n	8005856 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	fab3 f383 	clz	r3, r3
 8005854:	b2db      	uxtb	r3, r3
 8005856:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005858:	e048      	b.n	80058ec <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	2101      	movs	r1, #1
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	fa01 f303 	lsl.w	r3, r1, r3
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d03a      	beq.n	80058e6 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d003      	beq.n	8005880 <LL_GPIO_Init+0x58>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d10e      	bne.n	800589e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	461a      	mov	r2, r3
 8005886:	69b9      	ldr	r1, [r7, #24]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fed7 	bl	800563c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6819      	ldr	r1, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	461a      	mov	r2, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff feb7 	bl	800560c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	461a      	mov	r2, r3
 80058a4:	69b9      	ldr	r1, [r7, #24]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff ff05 	bl	80056b6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d111      	bne.n	80058d8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2bff      	cmp	r3, #255	; 0xff
 80058b8:	d807      	bhi.n	80058ca <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	461a      	mov	r2, r3
 80058c0:	69b9      	ldr	r1, [r7, #24]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ff34 	bl	8005730 <LL_GPIO_SetAFPin_0_7>
 80058c8:	e006      	b.n	80058d8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	461a      	mov	r2, r3
 80058d0:	69b9      	ldr	r1, [r7, #24]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff ff69 	bl	80057aa <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	461a      	mov	r2, r3
 80058de:	69b9      	ldr	r1, [r7, #24]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff fe56 	bl	8005592 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	3301      	adds	r3, #1
 80058ea:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	fa22 f303 	lsr.w	r3, r2, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1af      	bne.n	800585a <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <LL_RCC_HSI_IsReady>:
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005908:	4b07      	ldr	r3, [pc, #28]	; (8005928 <LL_RCC_HSI_IsReady+0x24>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005914:	d101      	bne.n	800591a <LL_RCC_HSI_IsReady+0x16>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <LL_RCC_HSI_IsReady+0x18>
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000

0800592c <LL_RCC_LSE_IsReady>:
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <LL_RCC_LSE_IsReady+0x24>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b02      	cmp	r3, #2
 800593c:	d101      	bne.n	8005942 <LL_RCC_LSE_IsReady+0x16>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <LL_RCC_LSE_IsReady+0x18>
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000

08005954 <LL_RCC_GetSysClkSource>:
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005958:	4b04      	ldr	r3, [pc, #16]	; (800596c <LL_RCC_GetSysClkSource+0x18>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 030c 	and.w	r3, r3, #12
}
 8005960:	4618      	mov	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000

08005970 <LL_RCC_GetAHBPrescaler>:
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005974:	4b04      	ldr	r3, [pc, #16]	; (8005988 <LL_RCC_GetAHBPrescaler+0x18>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000

0800598c <LL_RCC_GetAPB1Prescaler>:
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005998:	4618      	mov	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000

080059a8 <LL_RCC_GetAPB2Prescaler>:
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40021000 	.word	0x40021000

080059c4 <LL_RCC_GetUSARTClockSource>:
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <LL_RCC_GetUSARTClockSource+0x24>)
 80059ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	401a      	ands	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	041b      	lsls	r3, r3, #16
 80059da:	4313      	orrs	r3, r2
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40021000 	.word	0x40021000

080059ec <LL_RCC_GetUARTClockSource>:
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80059f4:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <LL_RCC_GetUARTClockSource+0x24>)
 80059f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	401a      	ands	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	4313      	orrs	r3, r2
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40021000 	.word	0x40021000

08005a14 <LL_RCC_PLL_GetMainSource>:
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a18:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <LL_RCC_PLL_GetMainSource+0x18>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0303 	and.w	r3, r3, #3
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40021000 	.word	0x40021000

08005a30 <LL_RCC_PLL_GetN>:
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <LL_RCC_PLL_GetN+0x18>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	0a1b      	lsrs	r3, r3, #8
 8005a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40021000 	.word	0x40021000

08005a4c <LL_RCC_PLL_GetR>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <LL_RCC_PLL_GetR+0x18>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40021000 	.word	0x40021000

08005a68 <LL_RCC_PLL_GetDivider>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <LL_RCC_PLL_GetDivider+0x18>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40021000 	.word	0x40021000

08005a84 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d132      	bne.n	8005afc <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff ff94 	bl	80059c4 <LL_RCC_GetUSARTClockSource>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8005aa2:	d016      	beq.n	8005ad2 <LL_RCC_GetUSARTClockFreq+0x4e>
 8005aa4:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8005aa8:	d81c      	bhi.n	8005ae4 <LL_RCC_GetUSARTClockFreq+0x60>
 8005aaa:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <LL_RCC_GetUSARTClockFreq+0x170>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <LL_RCC_GetUSARTClockFreq+0x34>
 8005ab0:	4a51      	ldr	r2, [pc, #324]	; (8005bf8 <LL_RCC_GetUSARTClockFreq+0x174>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <LL_RCC_GetUSARTClockFreq+0x3c>
 8005ab6:	e015      	b.n	8005ae4 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005ab8:	f000 f8f6 	bl	8005ca8 <RCC_GetSystemClockFreq>
 8005abc:	60f8      	str	r0, [r7, #12]
        break;
 8005abe:	e094      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005ac0:	f7ff ff20 	bl	8005904 <LL_RCC_HSI_IsReady>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 8082 	beq.w	8005bd0 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 8005acc:	4b4b      	ldr	r3, [pc, #300]	; (8005bfc <LL_RCC_GetUSARTClockFreq+0x178>)
 8005ace:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ad0:	e07e      	b.n	8005bd0 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005ad2:	f7ff ff2b 	bl	800592c <LL_RCC_LSE_IsReady>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d07b      	beq.n	8005bd4 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8005adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ae2:	e077      	b.n	8005bd4 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005ae4:	f000 f8e0 	bl	8005ca8 <RCC_GetSystemClockFreq>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f902 	bl	8005cf4 <RCC_GetHCLKClockFreq>
 8005af0:	4603      	mov	r3, r0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 f92c 	bl	8005d50 <RCC_GetPCLK2ClockFreq>
 8005af8:	60f8      	str	r0, [r7, #12]
        break;
 8005afa:	e076      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b0c      	cmp	r3, #12
 8005b00:	d131      	bne.n	8005b66 <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff ff5e 	bl	80059c4 <LL_RCC_GetUSARTClockSource>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8005b0e:	d015      	beq.n	8005b3c <LL_RCC_GetUSARTClockFreq+0xb8>
 8005b10:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8005b14:	d81b      	bhi.n	8005b4e <LL_RCC_GetUSARTClockFreq+0xca>
 8005b16:	4a3a      	ldr	r2, [pc, #232]	; (8005c00 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <LL_RCC_GetUSARTClockFreq+0xa0>
 8005b1c:	4a39      	ldr	r2, [pc, #228]	; (8005c04 <LL_RCC_GetUSARTClockFreq+0x180>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <LL_RCC_GetUSARTClockFreq+0xa8>
 8005b22:	e014      	b.n	8005b4e <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005b24:	f000 f8c0 	bl	8005ca8 <RCC_GetSystemClockFreq>
 8005b28:	60f8      	str	r0, [r7, #12]
        break;
 8005b2a:	e05e      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005b2c:	f7ff feea 	bl	8005904 <LL_RCC_HSI_IsReady>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d050      	beq.n	8005bd8 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 8005b36:	4b31      	ldr	r3, [pc, #196]	; (8005bfc <LL_RCC_GetUSARTClockFreq+0x178>)
 8005b38:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005b3a:	e04d      	b.n	8005bd8 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005b3c:	f7ff fef6 	bl	800592c <LL_RCC_LSE_IsReady>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d04a      	beq.n	8005bdc <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005b4c:	e046      	b.n	8005bdc <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005b4e:	f000 f8ab 	bl	8005ca8 <RCC_GetSystemClockFreq>
 8005b52:	4603      	mov	r3, r0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f8cd 	bl	8005cf4 <RCC_GetHCLKClockFreq>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 f8e1 	bl	8005d24 <RCC_GetPCLK1ClockFreq>
 8005b62:	60f8      	str	r0, [r7, #12]
        break;
 8005b64:	e041      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b30      	cmp	r3, #48	; 0x30
 8005b6a:	d139      	bne.n	8005be0 <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff ff29 	bl	80059c4 <LL_RCC_GetUSARTClockSource>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005b78:	d015      	beq.n	8005ba6 <LL_RCC_GetUSARTClockFreq+0x122>
 8005b7a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005b7e:	d81b      	bhi.n	8005bb8 <LL_RCC_GetUSARTClockFreq+0x134>
 8005b80:	4a21      	ldr	r2, [pc, #132]	; (8005c08 <LL_RCC_GetUSARTClockFreq+0x184>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <LL_RCC_GetUSARTClockFreq+0x10a>
 8005b86:	4a21      	ldr	r2, [pc, #132]	; (8005c0c <LL_RCC_GetUSARTClockFreq+0x188>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <LL_RCC_GetUSARTClockFreq+0x112>
 8005b8c:	e014      	b.n	8005bb8 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005b8e:	f000 f88b 	bl	8005ca8 <RCC_GetSystemClockFreq>
 8005b92:	60f8      	str	r0, [r7, #12]
          break;
 8005b94:	e029      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005b96:	f7ff feb5 	bl	8005904 <LL_RCC_HSI_IsReady>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d021      	beq.n	8005be4 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 8005ba0:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <LL_RCC_GetUSARTClockFreq+0x178>)
 8005ba2:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005ba4:	e01e      	b.n	8005be4 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005ba6:	f7ff fec1 	bl	800592c <LL_RCC_LSE_IsReady>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01b      	beq.n	8005be8 <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 8005bb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb4:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005bb6:	e017      	b.n	8005be8 <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005bb8:	f000 f876 	bl	8005ca8 <RCC_GetSystemClockFreq>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f898 	bl	8005cf4 <RCC_GetHCLKClockFreq>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f8ac 	bl	8005d24 <RCC_GetPCLK1ClockFreq>
 8005bcc:	60f8      	str	r0, [r7, #12]
          break;
 8005bce:	e00c      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8005bd0:	bf00      	nop
 8005bd2:	e00a      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8005bd4:	bf00      	nop
 8005bd6:	e008      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8005bd8:	bf00      	nop
 8005bda:	e006      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8005bdc:	bf00      	nop
 8005bde:	e004      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 8005be0:	bf00      	nop
 8005be2:	e002      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8005be4:	bf00      	nop
 8005be6:	e000      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8005be8:	bf00      	nop
  }
  return usart_frequency;
 8005bea:	68fb      	ldr	r3, [r7, #12]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	00030001 	.word	0x00030001
 8005bf8:	00030002 	.word	0x00030002
 8005bfc:	00f42400 	.word	0x00f42400
 8005c00:	000c0004 	.word	0x000c0004
 8005c04:	000c0008 	.word	0x000c0008
 8005c08:	00300010 	.word	0x00300010
 8005c0c:	00300020 	.word	0x00300020

08005c10 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c20:	d131      	bne.n	8005c86 <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fee2 	bl	80059ec <LL_RCC_GetUARTClockSource>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005c2e:	d015      	beq.n	8005c5c <LL_RCC_GetUARTClockFreq+0x4c>
 8005c30:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005c34:	d81b      	bhi.n	8005c6e <LL_RCC_GetUARTClockFreq+0x5e>
 8005c36:	4a19      	ldr	r2, [pc, #100]	; (8005c9c <LL_RCC_GetUARTClockFreq+0x8c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <LL_RCC_GetUARTClockFreq+0x34>
 8005c3c:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <LL_RCC_GetUARTClockFreq+0x90>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <LL_RCC_GetUARTClockFreq+0x3c>
 8005c42:	e014      	b.n	8005c6e <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005c44:	f000 f830 	bl	8005ca8 <RCC_GetSystemClockFreq>
 8005c48:	60f8      	str	r0, [r7, #12]
        break;
 8005c4a:	e021      	b.n	8005c90 <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005c4c:	f7ff fe5a 	bl	8005904 <LL_RCC_HSI_IsReady>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d019      	beq.n	8005c8a <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 8005c56:	4b13      	ldr	r3, [pc, #76]	; (8005ca4 <LL_RCC_GetUARTClockFreq+0x94>)
 8005c58:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005c5a:	e016      	b.n	8005c8a <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005c5c:	f7ff fe66 	bl	800592c <LL_RCC_LSE_IsReady>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d013      	beq.n	8005c8e <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 8005c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005c6c:	e00f      	b.n	8005c8e <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005c6e:	f000 f81b 	bl	8005ca8 <RCC_GetSystemClockFreq>
 8005c72:	4603      	mov	r3, r0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 f83d 	bl	8005cf4 <RCC_GetHCLKClockFreq>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f851 	bl	8005d24 <RCC_GetPCLK1ClockFreq>
 8005c82:	60f8      	str	r0, [r7, #12]
        break;
 8005c84:	e004      	b.n	8005c90 <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 8005c86:	bf00      	nop
 8005c88:	e002      	b.n	8005c90 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 8005c8a:	bf00      	nop
 8005c8c:	e000      	b.n	8005c90 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 8005c8e:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8005c90:	68fb      	ldr	r3, [r7, #12]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	00c00040 	.word	0x00c00040
 8005ca0:	00c00080 	.word	0x00c00080
 8005ca4:	00f42400 	.word	0x00f42400

08005ca8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005cae:	f7ff fe51 	bl	8005954 <LL_RCC_GetSysClkSource>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b0c      	cmp	r3, #12
 8005cb6:	d00c      	beq.n	8005cd2 <RCC_GetSystemClockFreq+0x2a>
 8005cb8:	2b0c      	cmp	r3, #12
 8005cba:	d80e      	bhi.n	8005cda <RCC_GetSystemClockFreq+0x32>
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d002      	beq.n	8005cc6 <RCC_GetSystemClockFreq+0x1e>
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d003      	beq.n	8005ccc <RCC_GetSystemClockFreq+0x24>
 8005cc4:	e009      	b.n	8005cda <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <RCC_GetSystemClockFreq+0x44>)
 8005cc8:	607b      	str	r3, [r7, #4]
      break;
 8005cca:	e009      	b.n	8005ce0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005ccc:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <RCC_GetSystemClockFreq+0x48>)
 8005cce:	607b      	str	r3, [r7, #4]
      break;
 8005cd0:	e006      	b.n	8005ce0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005cd2:	f000 f853 	bl	8005d7c <RCC_PLL_GetFreqDomain_SYS>
 8005cd6:	6078      	str	r0, [r7, #4]
      break;
 8005cd8:	e002      	b.n	8005ce0 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 8005cda:	4b04      	ldr	r3, [pc, #16]	; (8005cec <RCC_GetSystemClockFreq+0x44>)
 8005cdc:	607b      	str	r3, [r7, #4]
      break;
 8005cde:	bf00      	nop
  }

  return frequency;
 8005ce0:	687b      	ldr	r3, [r7, #4]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	00f42400 	.word	0x00f42400
 8005cf0:	00b71b00 	.word	0x00b71b00

08005cf4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005cfc:	f7ff fe38 	bl	8005970 <LL_RCC_GetAHBPrescaler>
 8005d00:	4603      	mov	r3, r0
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	4a05      	ldr	r2, [pc, #20]	; (8005d20 <RCC_GetHCLKClockFreq+0x2c>)
 8005d0a:	5cd3      	ldrb	r3, [r2, r3]
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	08006a50 	.word	0x08006a50

08005d24 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005d2c:	f7ff fe2e 	bl	800598c <LL_RCC_GetAPB1Prescaler>
 8005d30:	4603      	mov	r3, r0
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	4a05      	ldr	r2, [pc, #20]	; (8005d4c <RCC_GetPCLK1ClockFreq+0x28>)
 8005d36:	5cd3      	ldrb	r3, [r2, r3]
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08006a60 	.word	0x08006a60

08005d50 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005d58:	f7ff fe26 	bl	80059a8 <LL_RCC_GetAPB2Prescaler>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	0adb      	lsrs	r3, r3, #11
 8005d60:	4a05      	ldr	r2, [pc, #20]	; (8005d78 <RCC_GetPCLK2ClockFreq+0x28>)
 8005d62:	5cd3      	ldrb	r3, [r2, r3]
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	08006a60 	.word	0x08006a60

08005d7c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005d82:	f7ff fe47 	bl	8005a14 <LL_RCC_PLL_GetMainSource>
 8005d86:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d003      	beq.n	8005d96 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d003      	beq.n	8005d9c <RCC_PLL_GetFreqDomain_SYS+0x20>
 8005d94:	e005      	b.n	8005da2 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005d96:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8005d98:	607b      	str	r3, [r7, #4]
      break;
 8005d9a:	e005      	b.n	8005da8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005d9c:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005d9e:	607b      	str	r3, [r7, #4]
      break;
 8005da0:	e002      	b.n	8005da8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8005da2:	4b0e      	ldr	r3, [pc, #56]	; (8005ddc <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8005da4:	607b      	str	r3, [r7, #4]
      break;
 8005da6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005da8:	f7ff fe42 	bl	8005a30 <LL_RCC_PLL_GetN>
 8005dac:	4602      	mov	r2, r0
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	fb03 f402 	mul.w	r4, r3, r2
 8005db4:	f7ff fe58 	bl	8005a68 <LL_RCC_PLL_GetDivider>
 8005db8:	4603      	mov	r3, r0
 8005dba:	091b      	lsrs	r3, r3, #4
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	fbb4 f4f3 	udiv	r4, r4, r3
 8005dc2:	f7ff fe43 	bl	8005a4c <LL_RCC_PLL_GetR>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	0e5b      	lsrs	r3, r3, #25
 8005dca:	3301      	adds	r3, #1
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd90      	pop	{r4, r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	00f42400 	.word	0x00f42400
 8005de0:	00b71b00 	.word	0x00b71b00

08005de4 <LL_TIM_SetPrescaler>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <LL_TIM_SetAutoReload>:
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <LL_TIM_SetRepetitionCounter>:
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <LL_TIM_OC_SetCompareCH1>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <LL_TIM_OC_SetCompareCH2>:
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <LL_TIM_OC_SetCompareCH3>:
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <LL_TIM_OC_SetCompareCH4>:
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <LL_TIM_OC_SetCompareCH5>:
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <LL_TIM_OC_SetCompareCH6>:
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	615a      	str	r2, [r3, #20]
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a39      	ldr	r2, [pc, #228]	; (8005ffc <LL_TIM_Init+0xf8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00f      	beq.n	8005f3c <LL_TIM_Init+0x38>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f22:	d00b      	beq.n	8005f3c <LL_TIM_Init+0x38>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a36      	ldr	r2, [pc, #216]	; (8006000 <LL_TIM_Init+0xfc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <LL_TIM_Init+0x38>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a35      	ldr	r2, [pc, #212]	; (8006004 <LL_TIM_Init+0x100>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <LL_TIM_Init+0x38>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a34      	ldr	r2, [pc, #208]	; (8006008 <LL_TIM_Init+0x104>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d106      	bne.n	8005f4a <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a2b      	ldr	r2, [pc, #172]	; (8005ffc <LL_TIM_Init+0xf8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01b      	beq.n	8005f8a <LL_TIM_Init+0x86>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f58:	d017      	beq.n	8005f8a <LL_TIM_Init+0x86>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a28      	ldr	r2, [pc, #160]	; (8006000 <LL_TIM_Init+0xfc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d013      	beq.n	8005f8a <LL_TIM_Init+0x86>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a27      	ldr	r2, [pc, #156]	; (8006004 <LL_TIM_Init+0x100>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00f      	beq.n	8005f8a <LL_TIM_Init+0x86>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a26      	ldr	r2, [pc, #152]	; (8006008 <LL_TIM_Init+0x104>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00b      	beq.n	8005f8a <LL_TIM_Init+0x86>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a25      	ldr	r2, [pc, #148]	; (800600c <LL_TIM_Init+0x108>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <LL_TIM_Init+0x86>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a24      	ldr	r2, [pc, #144]	; (8006010 <LL_TIM_Init+0x10c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <LL_TIM_Init+0x86>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a23      	ldr	r2, [pc, #140]	; (8006014 <LL_TIM_Init+0x110>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d106      	bne.n	8005f98 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff ff2b 	bl	8005e00 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff ff17 	bl	8005de4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a10      	ldr	r2, [pc, #64]	; (8005ffc <LL_TIM_Init+0xf8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00f      	beq.n	8005fde <LL_TIM_Init+0xda>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a11      	ldr	r2, [pc, #68]	; (8006008 <LL_TIM_Init+0x104>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00b      	beq.n	8005fde <LL_TIM_Init+0xda>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a10      	ldr	r2, [pc, #64]	; (800600c <LL_TIM_Init+0x108>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d007      	beq.n	8005fde <LL_TIM_Init+0xda>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <LL_TIM_Init+0x10c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d003      	beq.n	8005fde <LL_TIM_Init+0xda>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a0e      	ldr	r2, [pc, #56]	; (8006014 <LL_TIM_Init+0x110>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d105      	bne.n	8005fea <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff ff19 	bl	8005e1c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff ff7a 	bl	8005ee4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	40013400 	.word	0x40013400
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800602e:	d045      	beq.n	80060bc <LL_TIM_OC_Init+0xa4>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006036:	d848      	bhi.n	80060ca <LL_TIM_OC_Init+0xb2>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603e:	d036      	beq.n	80060ae <LL_TIM_OC_Init+0x96>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006046:	d840      	bhi.n	80060ca <LL_TIM_OC_Init+0xb2>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604e:	d027      	beq.n	80060a0 <LL_TIM_OC_Init+0x88>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006056:	d838      	bhi.n	80060ca <LL_TIM_OC_Init+0xb2>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605e:	d018      	beq.n	8006092 <LL_TIM_OC_Init+0x7a>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006066:	d830      	bhi.n	80060ca <LL_TIM_OC_Init+0xb2>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d003      	beq.n	8006076 <LL_TIM_OC_Init+0x5e>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b10      	cmp	r3, #16
 8006072:	d007      	beq.n	8006084 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8006074:	e029      	b.n	80060ca <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f8b5 	bl	80061e8 <OC1Config>
 800607e:	4603      	mov	r3, r0
 8006080:	75fb      	strb	r3, [r7, #23]
      break;
 8006082:	e023      	b.n	80060cc <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f92e 	bl	80062e8 <OC2Config>
 800608c:	4603      	mov	r3, r0
 800608e:	75fb      	strb	r3, [r7, #23]
      break;
 8006090:	e01c      	b.n	80060cc <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 f9ab 	bl	80063f0 <OC3Config>
 800609a:	4603      	mov	r3, r0
 800609c:	75fb      	strb	r3, [r7, #23]
      break;
 800609e:	e015      	b.n	80060cc <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fa28 	bl	80064f8 <OC4Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	75fb      	strb	r3, [r7, #23]
      break;
 80060ac:	e00e      	b.n	80060cc <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 faa5 	bl	8006600 <OC5Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75fb      	strb	r3, [r7, #23]
      break;
 80060ba:	e007      	b.n	80060cc <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 fb02 	bl	80066c8 <OC6Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	75fb      	strb	r3, [r7, #23]
      break;
 80060c8:	e000      	b.n	80060cc <LL_TIM_OC_Init+0xb4>
      break;
 80060ca:	bf00      	nop
  }

  return result;
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	7b12      	ldrb	r2, [r2, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	89d2      	ldrh	r2, [r2, #14]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a21      	ldr	r2, [pc, #132]	; (80061e0 <LL_TIM_BDTR_Init+0x108>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <LL_TIM_BDTR_Init+0x8e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a20      	ldr	r2, [pc, #128]	; (80061e4 <LL_TIM_BDTR_Init+0x10c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d10d      	bne.n	8006182 <LL_TIM_BDTR_Init+0xaa>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <LL_TIM_BDTR_Init+0x108>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <LL_TIM_BDTR_Init+0xba>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <LL_TIM_BDTR_Init+0x10c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d11b      	bne.n	80061ca <LL_TIM_BDTR_Init+0xf2>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40013400 	.word	0x40013400

080061e8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f023 0201 	bic.w	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f023 0202 	bic.w	r2, r3, #2
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f023 0201 	bic.w	r2, r3, #1
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <OC1Config+0xec>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00f      	beq.n	800626e <OC1Config+0x86>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <OC1Config+0xf0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00b      	beq.n	800626e <OC1Config+0x86>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a20      	ldr	r2, [pc, #128]	; (80062dc <OC1Config+0xf4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d007      	beq.n	800626e <OC1Config+0x86>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a1f      	ldr	r2, [pc, #124]	; (80062e0 <OC1Config+0xf8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d003      	beq.n	800626e <OC1Config+0x86>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a1e      	ldr	r2, [pc, #120]	; (80062e4 <OC1Config+0xfc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d11e      	bne.n	80062ac <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f023 0208 	bic.w	r2, r3, #8
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f023 0204 	bic.w	r2, r3, #4
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fdba 	bl	8005e38 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800

080062e8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f023 0210 	bic.w	r2, r3, #16
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800631e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	0212      	lsls	r2, r2, #8
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f023 0220 	bic.w	r2, r3, #32
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0210 	bic.w	r2, r3, #16
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a23      	ldr	r2, [pc, #140]	; (80063dc <OC2Config+0xf4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00f      	beq.n	8006374 <OC2Config+0x8c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a22      	ldr	r2, [pc, #136]	; (80063e0 <OC2Config+0xf8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00b      	beq.n	8006374 <OC2Config+0x8c>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a21      	ldr	r2, [pc, #132]	; (80063e4 <OC2Config+0xfc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <OC2Config+0x8c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a20      	ldr	r2, [pc, #128]	; (80063e8 <OC2Config+0x100>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <OC2Config+0x8c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a1f      	ldr	r2, [pc, #124]	; (80063ec <OC2Config+0x104>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d11f      	bne.n	80063b4 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	019b      	lsls	r3, r3, #6
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	019b      	lsls	r3, r3, #6
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fd44 	bl	8005e54 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40012c00 	.word	0x40012c00
 80063e0:	40013400 	.word	0x40013400
 80063e4:	40014000 	.word	0x40014000
 80063e8:	40014400 	.word	0x40014400
 80063ec:	40014800 	.word	0x40014800

080063f0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	4313      	orrs	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a23      	ldr	r2, [pc, #140]	; (80064e4 <OC3Config+0xf4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00f      	beq.n	800647a <OC3Config+0x8a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a22      	ldr	r2, [pc, #136]	; (80064e8 <OC3Config+0xf8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00b      	beq.n	800647a <OC3Config+0x8a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a21      	ldr	r2, [pc, #132]	; (80064ec <OC3Config+0xfc>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d007      	beq.n	800647a <OC3Config+0x8a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a20      	ldr	r2, [pc, #128]	; (80064f0 <OC3Config+0x100>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d003      	beq.n	800647a <OC3Config+0x8a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <OC3Config+0x104>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d11f      	bne.n	80064ba <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	029b      	lsls	r3, r3, #10
 8006486:	4313      	orrs	r3, r2
 8006488:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	029b      	lsls	r3, r3, #10
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	015b      	lsls	r3, r3, #5
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff fccf 	bl	8005e70 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40013400 	.word	0x40013400
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40014400 	.word	0x40014400
 80064f4:	40014800 	.word	0x40014800

080064f8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	0212      	lsls	r2, r2, #8
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	031b      	lsls	r3, r3, #12
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	031b      	lsls	r3, r3, #12
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a23      	ldr	r2, [pc, #140]	; (80065ec <OC4Config+0xf4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00f      	beq.n	8006584 <OC4Config+0x8c>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <OC4Config+0xf8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00b      	beq.n	8006584 <OC4Config+0x8c>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a21      	ldr	r2, [pc, #132]	; (80065f4 <OC4Config+0xfc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d007      	beq.n	8006584 <OC4Config+0x8c>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a20      	ldr	r2, [pc, #128]	; (80065f8 <OC4Config+0x100>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d003      	beq.n	8006584 <OC4Config+0x8c>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <OC4Config+0x104>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d11f      	bne.n	80065c4 <OC4Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	039b      	lsls	r3, r3, #14
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	039b      	lsls	r3, r3, #14
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	019b      	lsls	r3, r3, #6
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	01db      	lsls	r3, r3, #7
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff fc58 	bl	8005e8c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40013400 	.word	0x40013400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800

08006600 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	4313      	orrs	r3, r2
 8006632:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	041b      	lsls	r3, r3, #16
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	041b      	lsls	r3, r3, #16
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a17      	ldr	r2, [pc, #92]	; (80066b4 <OC5Config+0xb4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00f      	beq.n	800667c <OC5Config+0x7c>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <OC5Config+0xb8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00b      	beq.n	800667c <OC5Config+0x7c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a15      	ldr	r2, [pc, #84]	; (80066bc <OC5Config+0xbc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d007      	beq.n	800667c <OC5Config+0x7c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <OC5Config+0xc0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <OC5Config+0x7c>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a13      	ldr	r2, [pc, #76]	; (80066c4 <OC5Config+0xc4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d109      	bne.n	8006690 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff fc03 	bl	8005ea8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40013400 	.word	0x40013400
 80066bc:	40014000 	.word	0x40014000
 80066c0:	40014400 	.word	0x40014400
 80066c4:	40014800 	.word	0x40014800

080066c8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	0212      	lsls	r2, r2, #8
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	051b      	lsls	r3, r3, #20
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	051b      	lsls	r3, r3, #20
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a16      	ldr	r2, [pc, #88]	; (800677c <OC6Config+0xb4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00f      	beq.n	8006746 <OC6Config+0x7e>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a15      	ldr	r2, [pc, #84]	; (8006780 <OC6Config+0xb8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00b      	beq.n	8006746 <OC6Config+0x7e>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a14      	ldr	r2, [pc, #80]	; (8006784 <OC6Config+0xbc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <OC6Config+0x7e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a13      	ldr	r2, [pc, #76]	; (8006788 <OC6Config+0xc0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <OC6Config+0x7e>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a12      	ldr	r2, [pc, #72]	; (800678c <OC6Config+0xc4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d109      	bne.n	800675a <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	029b      	lsls	r3, r3, #10
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff fbae 	bl	8005ec8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40013400 	.word	0x40013400
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400
 800678c:	40014800 	.word	0x40014800

08006790 <LL_USART_IsEnabled>:
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <LL_USART_IsEnabled+0x18>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <LL_USART_IsEnabled+0x1a>
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <LL_USART_SetPrescaler>:
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	f023 030f 	bic.w	r3, r3, #15
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	b292      	uxth	r2, r2
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <LL_USART_SetStopBitsLength>:
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	605a      	str	r2, [r3, #4]
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <LL_USART_SetHWFlowCtrl>:
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	609a      	str	r2, [r3, #8]
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
	...

0800682c <LL_USART_SetBaudRate>:
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b0b      	cmp	r3, #11
 800683e:	d83c      	bhi.n	80068ba <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d039      	beq.n	80068ba <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800684c:	d122      	bne.n	8006894 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <LL_USART_SetBaudRate+0x9c>)
 8006856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006860:	005a      	lsls	r2, r3, #1
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	085b      	lsrs	r3, r3, #1
 8006866:	441a      	add	r2, r3
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	fbb2 f3f3 	udiv	r3, r2, r3
 800686e:	b29b      	uxth	r3, r3
 8006870:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006878:	4013      	ands	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	b29b      	uxth	r3, r3
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	60da      	str	r2, [r3, #12]
}
 8006892:	e012      	b.n	80068ba <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	461a      	mov	r2, r3
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <LL_USART_SetBaudRate+0x9c>)
 800689c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	441a      	add	r2, r3
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	60da      	str	r2, [r3, #12]
}
 80068ba:	bf00      	nop
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	08006a98 	.word	0x08006a98

080068cc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80068da:	2300      	movs	r3, #0
 80068dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff ff56 	bl	8006790 <LL_USART_IsEnabled>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d15b      	bne.n	80069a2 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	4b2f      	ldr	r3, [pc, #188]	; (80069ac <LL_USART_Init+0xe0>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	6891      	ldr	r1, [r2, #8]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	6912      	ldr	r2, [r2, #16]
 80068fa:	4311      	orrs	r1, r2
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	6952      	ldr	r2, [r2, #20]
 8006900:	4311      	orrs	r1, r2
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	69d2      	ldr	r2, [r2, #28]
 8006906:	430a      	orrs	r2, r1
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff ff62 	bl	80067de <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff ff6f 	bl	8006804 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a21      	ldr	r2, [pc, #132]	; (80069b0 <LL_USART_Init+0xe4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d104      	bne.n	8006938 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800692e:	2003      	movs	r0, #3
 8006930:	f7ff f8a8 	bl	8005a84 <LL_RCC_GetUSARTClockFreq>
 8006934:	60b8      	str	r0, [r7, #8]
 8006936:	e019      	b.n	800696c <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <LL_USART_Init+0xe8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d104      	bne.n	800694a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006940:	200c      	movs	r0, #12
 8006942:	f7ff f89f 	bl	8005a84 <LL_RCC_GetUSARTClockFreq>
 8006946:	60b8      	str	r0, [r7, #8]
 8006948:	e010      	b.n	800696c <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART3)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <LL_USART_Init+0xec>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d104      	bne.n	800695c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8006952:	2030      	movs	r0, #48	; 0x30
 8006954:	f7ff f896 	bl	8005a84 <LL_RCC_GetUSARTClockFreq>
 8006958:	60b8      	str	r0, [r7, #8]
 800695a:	e007      	b.n	800696c <LL_USART_Init+0xa0>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a17      	ldr	r2, [pc, #92]	; (80069bc <LL_USART_Init+0xf0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d103      	bne.n	800696c <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8006964:	20c0      	movs	r0, #192	; 0xc0
 8006966:	f7ff f953 	bl	8005c10 <LL_RCC_GetUARTClockFreq>
 800696a:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d011      	beq.n	8006996 <LL_USART_Init+0xca>
        && (USART_InitStruct->BaudRate != 0U))
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <LL_USART_Init+0xca>
    {
      status = SUCCESS;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	69d9      	ldr	r1, [r3, #28]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	460b      	mov	r3, r1
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff ff4b 	bl	800682c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff ff0a 	bl	80067b6 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	efff69f3 	.word	0xefff69f3
 80069b0:	40013800 	.word	0x40013800
 80069b4:	40004400 	.word	0x40004400
 80069b8:	40004800 	.word	0x40004800
 80069bc:	40004c00 	.word	0x40004c00

080069c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80069c8:	4a04      	ldr	r2, [pc, #16]	; (80069dc <LL_SetSystemCoreClock+0x1c>)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6013      	str	r3, [r2, #0]
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	20000000 	.word	0x20000000

080069e0 <__libc_init_array>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	4d0d      	ldr	r5, [pc, #52]	; (8006a18 <__libc_init_array+0x38>)
 80069e4:	4c0d      	ldr	r4, [pc, #52]	; (8006a1c <__libc_init_array+0x3c>)
 80069e6:	1b64      	subs	r4, r4, r5
 80069e8:	10a4      	asrs	r4, r4, #2
 80069ea:	2600      	movs	r6, #0
 80069ec:	42a6      	cmp	r6, r4
 80069ee:	d109      	bne.n	8006a04 <__libc_init_array+0x24>
 80069f0:	4d0b      	ldr	r5, [pc, #44]	; (8006a20 <__libc_init_array+0x40>)
 80069f2:	4c0c      	ldr	r4, [pc, #48]	; (8006a24 <__libc_init_array+0x44>)
 80069f4:	f000 f820 	bl	8006a38 <_init>
 80069f8:	1b64      	subs	r4, r4, r5
 80069fa:	10a4      	asrs	r4, r4, #2
 80069fc:	2600      	movs	r6, #0
 80069fe:	42a6      	cmp	r6, r4
 8006a00:	d105      	bne.n	8006a0e <__libc_init_array+0x2e>
 8006a02:	bd70      	pop	{r4, r5, r6, pc}
 8006a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a08:	4798      	blx	r3
 8006a0a:	3601      	adds	r6, #1
 8006a0c:	e7ee      	b.n	80069ec <__libc_init_array+0xc>
 8006a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a12:	4798      	blx	r3
 8006a14:	3601      	adds	r6, #1
 8006a16:	e7f2      	b.n	80069fe <__libc_init_array+0x1e>
 8006a18:	08006ac8 	.word	0x08006ac8
 8006a1c:	08006ac8 	.word	0x08006ac8
 8006a20:	08006ac8 	.word	0x08006ac8
 8006a24:	08006acc 	.word	0x08006acc

08006a28 <memset>:
 8006a28:	4402      	add	r2, r0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d100      	bne.n	8006a32 <memset+0xa>
 8006a30:	4770      	bx	lr
 8006a32:	f803 1b01 	strb.w	r1, [r3], #1
 8006a36:	e7f9      	b.n	8006a2c <memset+0x4>

08006a38 <_init>:
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	bf00      	nop
 8006a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3e:	bc08      	pop	{r3}
 8006a40:	469e      	mov	lr, r3
 8006a42:	4770      	bx	lr

08006a44 <_fini>:
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	bf00      	nop
 8006a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4a:	bc08      	pop	{r3}
 8006a4c:	469e      	mov	lr, r3
 8006a4e:	4770      	bx	lr
